
<% if @total_std.blank? %>
  <% if @grading_levels.blank? %>
  <% @grading_levels = GradingLevel.for_batch(@batch.id) %>
  <% if @grading_levels.blank? %>
    <% @grading_levels = GradingLevel.default %>
  <% end %>
  <% end %>
  <%

  @total_std = 0
  @student_list = []
  @subject_highest = {}
  unless @tabulation_data.blank?
    connect_exam = 0
    batch_loop = 0
    @tabulation_data['report'].each do |tab|
      batch_subject = Subject.find_all_by_batch_id(@tabulation_data['batches'][batch_loop], :conditions=>"elective_group_id IS NULL and is_deleted=false")
      batch_subject_id = batch_subject.map(&:id)
      batch_loop = batch_loop+1
      connect_exam_id = @tabulation_data['connect_exams'][connect_exam]
      connect_exam = connect_exam+1
      grand_total = 0
      grand_grade_point = 0
      u_grade = 0
      tab['students'].each do |std| 
        @total_std = @total_std+1
        total_std_subject = StudentsSubject.find_all_by_student_id(std['id'].to_i)
        std_subject_id = total_std_subject.map(&:subject_id)
        total_subject = 0
        tab['subjects'].each do |sub|
          
          if sub['grade_subject'].to_i == 1
            next
          end  
          
          has_exam = false
          tab['exams'].each do |rs|
            if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
              has_exam = true
              break
            end  
          end 
          if has_exam == false
            next
          end 
        
          if batch_subject_id.include?(sub['id'].to_i) or std_subject_id.include?(sub['id'].to_i)
            total_mark = 0
            full_mark = 0
            tab['exams'].each do |rs|
              if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?   
                
                full_mark = full_mark+rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f
                total_mark = total_mark+rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                
              end    
            end
            
            

            total_mark2_no_round = total_mark
            full_mark = full_mark
            total_mark = total_mark.round()


           
            if total_mark.to_f>0 and full_mark.to_f>0
              main_mark = (total_mark.to_f/full_mark.to_f)*100 
            else
              main_mark = 0
            end 
            
            
            subject_full_marks_no_round = total_mark
            subject_full_marks = total_mark
            
           
           
           grand_total = grand_total+total_mark
           
           grade = GradingLevel.percentage_to_grade(main_mark, @batch.id)
           if !grade.blank? and !grade.name.blank?
             grand_grade_point = grand_grade_point+grade.credit_points.to_f
             if grade.credit_points.to_i == 0
              u_grade = u_grade+1
             end
           end 
            if @subject_highest[sub['id'].to_i].blank?
              @subject_highest[sub['id'].to_i] = subject_full_marks
            elsif subject_full_marks.to_f > @subject_highest[sub['id'].to_i].to_f
               @subject_highest[sub['id'].to_i] = subject_full_marks.to_f
            end

          end  
        end
      
        if u_grade == 0  
          grand_total_new = grand_total
          grand_grade_new = grand_grade_point
          @student_list << [grand_grade_new.to_f,grand_total_new.to_f,std['id'].to_i]
        end  

      end
    end
   end
   @student_position = {}
   
    unless @student_list.blank?
      position = 0
      @sorted_students = @student_list.sort
      @sorted_students.each do|s|
          position = position+1
          @student_position[s[2].to_i] = position
      end 
    end
  end
    
   

%> 
