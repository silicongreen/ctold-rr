<%-# Champs21
#Copyright 2010 teamCreative Private Limited
#
#This product includes software developed at
#Project Champs21 - http://www.champs21.com/
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License. -%>
<div id="page-yield" class="available_sections1">
    <div class="page1"> </div>
    <div class="section1 row" >
        <center>
            <div id="pdf-header-south" class="general-header">
                <h4 align="center"><%= wicked_pdf_image_tag "/"+("#{Rails.root}/"+ (current_school_detail.logo.path||"public/images/application/c.png")),:width=> '4%' %></h4>
                <h2 align="center"><%=Configuration.get_config_value('InstitutionName'); %></h2>
            </div>
            <h4 align="center">Tabulation Sheet, <%= @connect_exam_obj.name %></h4>
            <%= render  :partial=>"/connect_exam/south_point/tabulation_top" %>

            <% unless @report_data.blank? %>
              <% c = 'even' %>
              <table id="pdf-table" width="100%" cellspacing="0">
                  <tr class="table-header">
                      <td class="col-pdf">Roll</td>
                      <td class="col-pdf">Students Name</td>
                      <td class="col-pdf">Term</td>
                      <% @report_data['report']['subjects'].each do |sub| %>
                        <td><%=  sub['code'] %><hr/>Marks<hr/>Grd</td>
                      <% end %> 
                      <% @report_data['report']['no_exam_subject_resutl'].each do |sub| %>
                        <td><%=  sub['code'] %></td>
                      <% end %> 

                      <td>Total</td>
                      <td>Grade Count</td>

                  </tr>

                  <% extender = 0 %>
                  <% std_count = 0 %>
                  <% page_break_2 = 0 %>
                  <% j = 0 %>

                  <% @report_data['report']['students'].each do |std| %>
                    <% j = j+1 %>
                    <%  std_count = std_count+1; %>
                    <% if std_count>4 && extender ==0 %>
                      <% std_count = 0 %>
                      <% extender = 1 %>
                      <tr class="page-break1">
                          <td colspan="100">&nbsp;</td>
                      </tr>    
                    <% elsif std_count>4 && extender ==1 %>
                      <% std_count = 0 %>
                      <% extender = 1 %>
                      <% page_break_2=1 %>
                      <tr class="page-break4">
                          <td colspan="100">&nbsp;</td>
                      </tr> 

                    <% end %>    




                    <tr class="odd">

                        <td class="name"><%= std['class_roll_no'] %></td>
                        <td class="name-std"><%= std['first_name'].to_s+" "+std['last_name'].to_s %></td>
                        <td class="name-std">FQ<hr/>SQ<hr/>TTL</td>
                        <% total_mark = 0 %>

                        <% q1_mark = 0 %>
                        <% q2_mark = 0 %>
                        <% f_mark = 0 %>
                        <% tf_mark = 0 %>

                        <% grades1 = [] %>
                        <% grade_count1 = {} %>
                        <% grades2 = [] %>
                        <% grade_count2 = {} %>
                        <% grades3 = [] %>
                        <% grade_count3 = {} %>

                        <% grades = [] %>
                        <% grade_count = {} %>
                        <% @report_data['report']['subjects'].each do |sub| %>
                          <% subjectdata = Subject.find(sub['id'].to_i) %>
                          <% check_std_subject = StudentsSubject.find_by_student_id_and_subject_id(std['id'],sub['id'].to_i) %>
                          <% if check_std_subject.blank? and !subjectdata.elective_group_id.blank? %>
                            <td>&nbsp;</td>
                          <% else %>
                            <% obtained_mark = 0 %>
                            <% full_mark = 0 %>
                            <% highest_mark = 0 %>


                            <% st_full_mark1 = 0 %>
                            <% ct_full_mark1 = 0 %>

                            <% st_marks1 = [] %>
                            <% ct_marks1 = [] %>
                            <% avg_mark_st1 = 0; %>
                            <% avg_mark_ct1 = 0; %>
                            <% full_mark1 = 0 %>

                            <% st_full_mark2 = 0 %>
                            <% ct_full_mark2 = 0 %>

                            <% st_marks2 = [] %>
                            <% ct_marks2 = [] %>
                            <% avg_mark_st2 = 0; %>
                            <% avg_mark_ct2 = 0; %>
                            <% full_mark2 = 0 %>

                            <% first_term_mark = 0 %>
                            <% first_term_ab = false %>
                            <% first_term_full_mark = 0 %>
                            <% first_term_avg_mark = 0 %>
                            <% 
                            unless @report_data['report']['exams'].blank?  
                              @report_data['report']['exams'].each do |report|

                                if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank?

                                  #Calculation First Quarter Mark
                                  if report['quarter'] == '1'
                                    if st_full_mark1 == 0 and report['exam_category'] == '4'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                        st_full_mark1 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      end
                                      end                     
                                    if ct_full_mark1 == 0 and report['exam_category'] == '1'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                        ct_full_mark1 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      end
                                      end

                                    if report['exam_category'] == '4'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                        st_marks1 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                        else
                                        st_marks1 << 0
                                      end      
                                      end

                                    if report['exam_category'] == '1'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                        ct_marks1 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                        else
                                        ct_marks1 << 0
                                      end      
                                    end
                                    end 

                                  #Calculation 2nd Quarter Mark
                                  if report['quarter'] == '2'
                                    if st_full_mark2 == 0 and report['exam_category'] == '4'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                        st_full_mark2 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      end
                                      end                     
                                    if ct_full_mark2 == 0 and report['exam_category'] == '1'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                        ct_full_mark2 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      end
                                      end

                                    if report['exam_category'] == '4'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                        st_marks2 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                        else
                                        st_marks2 << 0
                                      end      
                                      end

                                    if report['exam_category'] == '1'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                        ct_marks2 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                        else
                                        ct_marks2 << 0
                                      end      
                                    end
                                  end 



                                end

                              end
                              end

                              #Calculation First Quarter Mark
                            st_marks1.sort! {|x,y| y <=> x }
                            ct_marks1.sort! {|x,y| y <=> x }
                            
                            if ct_full_mark1.to_i == 30
                              all_marks_ct1 = 0
                              iloop1 = 0
                              ct_marks1.each do |ct_mark|
                                all_marks_ct1 = all_marks_ct1+ct_mark
                                iloop1 = iloop1+1
                              end  
                              avg_mark_ct1 = all_marks_ct1.to_f/iloop1.to_f
                            else  
                              if ct_full_mark1.to_i == 20 
                                  avg_mark_ct1 = ct_marks1[0].to_f+ct_marks1[1].to_f+ct_marks1[2].to_f
                                  ct_full_mark1 = ct_full_mark1*3
                              else 
                                  avg_mark_ct1 = ct_marks1[0].to_f+ct_marks1[1].to_f
                                  ct_full_mark1 = ct_full_mark1*2
                              end 

                              if st_full_mark1.to_i == 10 
                                  avg_mark_st1 = st_marks1[0].to_f+st_marks1[1].to_f+st_marks1[2].to_f+st_marks1[3].to_f
                                  st_full_mark1 = st_full_mark1*4
                              else st_full_mark1.to_i == 5  
                                  avg_mark_st1 = st_marks1[0].to_f+st_marks1[1].to_f+st_marks1[2].to_f
                                  st_full_mark1 = st_full_mark1*3
                              end
                              
                              
                            end
                          
                            full_mark1 = ct_full_mark1.to_i+st_full_mark1.to_i
                            obtained_mark1= avg_mark_ct1.to_f+avg_mark_st1.to_f
                            
                            if full_mark1 == 100
                              obtained_mark1 = obtained_mark1/2
                              obtained_mark1 = obtained_mark1.round()
                              full_mark1 = 50
                            else
                              obtained_mark1 = (obtained_mark1/35)*25
                              obtained_mark1 = obtained_mark1.round()
                              full_mark1 = 25
                            end
                            
                            main_mark1 = (obtained_mark1.round().to_f/full_mark1.to_f)*100

                            #Calculation 2nd Quarter Mark
                            st_marks2.sort! {|x,y| y <=> x }
                            ct_marks2.sort! {|x,y| y <=> x }
                            #if sub['id'].to_i == 
                            if ct_full_mark2.to_i == 30
                              all_marks_ct2 = 0
                              iloop2 = 0
                              ct_marks2.each do |ct_mark|
                                all_marks_ct2 = all_marks_ct2+ct_mark
                                iloop2 = iloop2+1
                              end  
                              avg_mark_ct2 = all_marks_ct2.to_f/iloop2.to_f
                            else  
                              if ct_full_mark2.to_i == 20 
                                  avg_mark_ct2 = ct_marks2[0].to_f+ct_marks2[1].to_f+ct_marks2[2].to_f
                                  ct_full_mark2 = ct_full_mark2*3
                              else 
                                  avg_mark_ct2 = ct_marks2[0].to_f+ct_marks2[1].to_f
                                  ct_full_mark2 = ct_full_mark2*2
                              end 

                              if st_full_mark2.to_i == 10 
                                  avg_mark_st2 = st_marks2[0].to_f+st_marks2[1].to_f+st_marks2[2].to_f+st_marks2[3].to_f
                                  st_full_mark2 = st_full_mark2*4
                              else st_full_mark2.to_i == 5  
                                  avg_mark_st2 = st_marks2[0].to_f+st_marks2[1].to_f+st_marks2[2].to_f
                                  st_full_mark2 = st_full_mark2*3
                              end
                              
                              
                            end
                          #
                            full_mark2 = ct_full_mark2.to_i+st_full_mark2.to_i
                            obtained_mark2 = avg_mark_ct2.to_f+avg_mark_st2.to_f
                            #abort(full_mark2.to_s + "  " + obtained_mark2.to_s)
                            if full_mark2 == 100
                              obtained_mark2 = obtained_mark2/2
                              obtained_mark2 = obtained_mark2.round()
                              full_mark2 = 50
                            else
                              obtained_mark2 = (obtained_mark2/35)*25
                              obtained_mark2 = obtained_mark2.round()
                              full_mark2 = 25
                            end
                            
                            main_mark2 = (obtained_mark2.round().to_f/full_mark2.to_f)*100 
                            
                            #Calculation First Term (40/20) Mark
                            full_mark = full_mark1+full_mark2
                            obtained_mark = obtained_mark1.round()+obtained_mark2.round()




                            main_mark = (obtained_mark.round().to_f/full_mark.to_f)*100


                            grade_name1 = "-"
                            grade_name2 = "-"
                            grade_name  = "-"

                            grade = GradingLevel.percentage_to_grade(main_mark1, @batch.id)
                            if !grade.blank? and !grade.name.blank?
                              grade_name1 = grade.name
                              if grades1.include?(grade.name.to_s)
                                grade_count1[grade.name.to_s] = grade_count1[grade.name.to_s]+1
                                else
                                grades1 << grade.name.to_s
                                grade_count1[grade.name.to_s] = 1
                              end
                              end

                            grade = GradingLevel.percentage_to_grade(main_mark2, @batch.id)
                            if !grade.blank? and !grade.name.blank?
                              grade_name2 = grade.name
                              if grades2.include?(grade.name.to_s)
                                grade_count2[grade.name.to_s] = grade_count2[grade.name.to_s]+1
                                else
                                grades2 << grade.name.to_s
                                grade_count2[grade.name.to_s] = 1
                              end
                              end



                            grade = GradingLevel.percentage_to_grade(main_mark, @batch.id)
                            if !grade.blank? and !grade.name.blank?
                              grade_name = grade.name
                              if grades.include?(grade.name.to_s)
                                grade_count[grade.name.to_s] = grade_count[grade.name.to_s]+1
                                else
                                grades << grade.name.to_s
                                grade_count[grade.name.to_s] = 1
                              end
                              end

                            total_mark = total_mark+obtained_mark


                          %>
                            <td>
                                <%
                                q1_mark = q1_mark+obtained_mark1.round()
                                q2_mark = q2_mark+obtained_mark2.round()
                                tf_mark = tf_mark+obtained_mark.round()
                              %>
                                <%= obtained_mark1.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name1+"<hr/>" %>
                                <%= obtained_mark2.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name2+"<hr/>" %>
                                <%= obtained_mark.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name %>   
                            </td> 
                          <% end %>    
                        <% end %> 

                        <% @report_data['report']['no_exam_subject_resutl'].each do |sub| %>
                          <td>  
                              <% if !sub['subject_comment1'].blank? && !sub['subject_comment1'][std['id']].blank? %>
                                <%
                                if !sub['subject_comment1'][std['id']].blank?
                                  if grades1.include?(sub['subject_comment1'][std['id']].to_s)
                                    grade_count1[sub['subject_comment1'][std['id']]] = grade_count1[sub['subject_comment1'][std['id']]]+1
                                    else
                                    grades1 << sub['subject_comment1'][std['id']].to_s
                                    grade_count1[sub['subject_comment1'][std['id']].to_s] = 1
                                  end 
                                  end 
                              %>
                                <%=  sub['subject_comment1'][std['id']] %>
                              <% else %>
                                &nbsp;
                              <% end %>  
                              <hr/>

                              <% if !sub['subject_comment2'].blank? && !sub['subject_comment2'][std['id']].blank? %>
                                <%
                                if !sub['subject_comment2'][std['id']].blank?
                                  if grades2.include?(sub['subject_comment2'][std['id']].to_s)
                                    grade_count2[sub['subject_comment2'][std['id']]] = grade_count2[sub['subject_comment2'][std['id']]]+1
                                    else
                                    grades2 << sub['subject_comment2'][std['id']].to_s
                                    grade_count2[sub['subject_comment2'][std['id']].to_s] = 1
                                  end 
                                  end 
                              %>
                                <%=  sub['subject_comment2'][std['id']] %>
                              <% else %>
                                &nbsp;
                              <% end %> 
                              <hr/>


                              <% if !sub['subject_comment'][std['id']].nil? && !sub['subject_comment'][std['id']].blank? %>
                                <%
                                if !sub['subject_comment'][std['id']].blank?
                                  if grades.include?(sub['subject_comment'][std['id']].to_s)
                                    grade_count[sub['subject_comment'][std['id']]] = grade_count[sub['subject_comment'][std['id']]]+1
                                    else
                                    grades << sub['subject_comment'][std['id']].to_s
                                    grade_count[sub['subject_comment'][std['id']].to_s] = 1
                                  end 
                                  end 
                              %>
                                <%=  sub['subject_comment'][std['id']] %>
                              <% else %>
                                &nbsp;
                              <% end %> 
                          </td>        
                        <% end %>
                        <td>
                            <%= q1_mark.round().to_s+"<hr/>" %> 
                            <%= q2_mark.round().to_s+"<hr/>" %> 
                            <%= tf_mark.round().to_s %>   
                        </td>
                        <td class="no-warp">
                            <% i = 1 %>
                            <% total_grade_std = grades1.count  %>
                            <% grades1.each do |grade| %>
                              <%= grade.to_s+"-"+grade_count1[grade].to_s %>
                              <% if i!=total_grade_std %>
                                ,
                              <% end %>
                              <% i = i+1 %>
                            <% end %>
                            <hr/>    
                            <% i = 1 %>
                            <% total_grade_std = grades2.count  %>
                            <% grades2.each do |grade| %>
                              <%= grade.to_s+"-"+grade_count2[grade].to_s %>
                              <% if i!=total_grade_std %>
                                ,
                              <% end %>
                              <% i = i+1 %>
                            <% end %>
                            <hr/>
                            <% i = 1 %>
                            <% total_grade_std = grades.count  %>
                            <% grades.each do |grade| %>
                              <%= grade.to_s+"-"+grade_count[grade].to_s %>
                              <% if i!=total_grade_std %>
                                ,
                              <% end %>
                              <% i = i+1 %>
                            <% end %>
                        </td>
                        <% unless @student_position.blank? %>
                          <% unless @student_position[std['id'].to_i].blank? %>
                            <td><%= @student_position[std['id'].to_i] %></td>
                          <% else %>
                            <td>-</td>
                          <% end %>
                        <% end %>


                    </tr>
                    <% @std_id_comment = std['id'] %>
                    <%= render  :partial=>"/connect_exam/comment_text" %>

                  <% end %>
              </table>
            <% end %>
        </center>
    </div>


</div>
<style>
    .no-warp
    {
        white-space: nowrap;
    }

    .page-break4 td{
        height: 150px;
        border: 1px solid #fff;
        border-bottom: 1px solid #ADACAB;
    }

    .even td{

        padding: 2px 2px 2px 8px;
        border: 1px solid #000000;
        border-top: 0px solid #fff;
        text-align: center;

    }

    .odd td{
        padding: 2px 2px 2px 8px;
        border: 1px solid #000000;
        border-top: 0px solid #fff;
        text-align: center;

    }
    .table-header td{
        padding: 2px 2px 2px 8px;
        border: 1px solid #000000;
        color: #000000;
        background: #ffffff;
        font-weight: bold;
        text-align: center;
        font-size: 11px;
    }
</style>
