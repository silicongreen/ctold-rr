
<% if @total_std.blank? %>
  <% if @grading_levels.blank? %>
  <% @grading_levels = GradingLevel.for_batch(@batch.id) %>
  <% if @grading_levels.blank? %>
    <% @grading_levels = GradingLevel.default %>
  <% end %>
  <% end %>
  <%
  @total_std_batch = 0
  @total_std = 0
  @student_list = []
  @student_list_batch = []
  @student_total_grade = {}
  @subject_highest = {}

  batchobj = Batch.find_by_id(@batch.id) 
  courseObj = Course.find_by_id(batchobj.course_id)
  all_courses = Course.find_all_by_course_name(courseObj.course_name)
  all_batch = Batch.find_all_by_course_id(all_courses.map(&:id))
  std_subject = StudentsSubject.find_all_by_batch_id(all_batch.map(&:id),:include=>[:subject])
  @std_subject_hash_type = []
  @std_subject_hash_code = []
  unless std_subject.blank?
    std_subject.each do |std_sub|
      @std_subject_hash_type << std_sub.student_id.to_s+"|||"+std_sub.subject_id.to_s+"|||"+std_sub.elective_type.to_s
      @std_subject_hash_code << std_sub.student_id.to_s+"|||"+std_sub.subject.code
    end
  end
  @batch_subject_hash_code = [] 
  batch_subject = Subject.find_all_by_batch_id(@batch.id, :conditions=>"elective_group_id IS NULL and is_deleted=false")
  unless batch_subject.blank?
    batch_subject.each do |std_sub|
      @batch_subject_hash_code << std_sub.code
    end
  end
  unless @tabulation_data.blank?
    connect_exam = 0
    batch_loop = 0
    group_name = courseObj.group
    @group_name_upper = group_name
    subjectss = []
    @tabulation_data['report'].each do |tab|
      batch_subject = Subject.find_all_by_batch_id(@tabulation_data['batches'][batch_loop], :conditions=>"elective_group_id IS NULL and is_deleted=false")
      batch_subject_id = batch_subject.map(&:id)
      batch_subject_hash_code_main = []	
      unless batch_subject.blank?	
        batch_subject.each do |std_sub|	
          batch_subject_hash_code_main << std_sub.code	
        end	
      end
      if @tabulation_data['batches'][batch_loop].blank?
        next
      end
      if tab.kind_of?(Array) or tab.blank? or tab['students'].blank?
        next
      end
      batch_data = Batch.find(@tabulation_data['batches'][batch_loop])
      batch_loop = batch_loop+1
      connect_exam_id = @tabulation_data['connect_exams'][connect_exam]
      exam_type = 1
      connect_exam = connect_exam+1
      std_group_name = batch_data.course.group
      total_grade = 0
      
      tab['students'].each do |std| 
        
        total_std_subject = StudentsSubject.find_all_by_student_id(std['id'].to_i)
        std_subject_id = total_std_subject.map(&:subject_id)
        grand_total = 0
        bonus_mark = 0
        subject_failed = false
        if std_group_name == group_name or connect_exam_id.to_i == @connect_exam_obj.id
          @total_std = @total_std+1
        end
        if connect_exam_id.to_i == @connect_exam_obj.id
          @total_std_batch = @total_std_batch+1
        end 
        tab['subjects'].each do |sub|
          if sub['grade_subject'].to_i == 1
            next
          end  
          subjectss << sub['id'].to_i
          if !batch_subject_id.include?(sub['id'].to_i) and !std_subject_id.include?(sub['id'].to_i)
              next
          end 
          fourth_subject = false;
          if !@std_subject_hash_type.blank?
            if @std_subject_hash_type.include?(@student.id.to_s+"|||"+sub['id'].to_s+"|||4")
              fourth_subject = true
            end  
          end   
          subject_marks = 0
          full_mark = 0
          obtain_mark = 0
          first_quarter_mark = 0
          first_quarter_full_mark = 0
          second_quarter_mark = 0
          second_quarter_full_mark = 0
          half_quarter_mark = 0
          half_quarter_full_mark = 0
          full_mark = 0
          unless tab['exams'].blank? 
            tab['exams'].each do |report|
              if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank?
                if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                  if report['exam_category'] == '1' && report['quarter'] == '5'
                    first_quarter_mark = first_quarter_mark.to_f+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    first_quarter_full_mark = first_quarter_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                  elsif report['exam_category'] == '3' && report['quarter'] == '5'
                    first_quarter_mark = first_quarter_mark.to_f+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    first_quarter_full_mark = first_quarter_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                  elsif report['exam_category'] == '1' && report['quarter'] == '2'
                    second_quarter_mark = second_quarter_mark.to_f+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    second_quarter_full_mark = second_quarter_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                  elsif report['exam_category'] == '3' && report['quarter'] == '2'
                    second_quarter_mark = second_quarter_mark.to_f+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    second_quarter_full_mark = second_quarter_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                  elsif report['exam_category'] == '3' && report['quarter'] == '3'
                    half_quarter_mark = half_quarter_mark.to_f+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    half_quarter_full_mark = half_quarter_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                  end
                end 
              end  
            end
          end
          first_quarter_out_of_100 = 0
          second_quarter_out_of_100 = 0
          half_quarter_out_of_100 = 0
          current_full_mark = first_quarter_full_mark+second_quarter_full_mark+half_quarter_full_mark 
          f_mark_current = 0
          need_for_test = 25
          need_for_term = 50
          if current_full_mark >= 100
            f_mark_current = 100
            need_for_test = 25
            need_for_term = 50
          else
            f_mark_current = 50
            need_for_test = 12.5
            need_for_term = 25
          end

          if first_quarter_mark > 0 && first_quarter_full_mark > 0
            first_quarter_out_of_100 = (first_quarter_mark.to_f/first_quarter_full_mark.to_f)*f_mark_current
          end

          if second_quarter_mark > 0 && second_quarter_full_mark > 0
            second_quarter_out_of_100 = (second_quarter_mark.to_f/second_quarter_full_mark.to_f)*f_mark_current
          end

          if half_quarter_mark > 0 && half_quarter_full_mark > 0
            half_quarter_out_of_100 = (half_quarter_mark.to_f/half_quarter_full_mark.to_f)*f_mark_current
          end

          if first_quarter_out_of_100 > 0
            first_quarter_out_of_25 = (first_quarter_out_of_100.to_f/f_mark_current)*need_for_test
          else
            first_quarter_out_of_25 = 0
          end

          if second_quarter_out_of_100 > 0
            second_quarter_out_of_25 = (second_quarter_out_of_100.to_f/f_mark_current)*need_for_test
          else
            second_quarter_out_of_25 = 0
          end
          
          if half_quarter_out_of_100 > 0
            half_quarter_out_of_50 = (half_quarter_out_of_100.to_f/f_mark_current)*need_for_term
          else
            half_quarter_out_of_50 =  0
          end

          f_mark = f_mark_current
          if first_quarter_mark > 0
            first_quarter_out_of_25 = first_quarter_mark.to_f/2
          end
          if second_quarter_mark > 0
            second_quarter_out_of_25 = second_quarter_mark.to_f/2
          end
          if half_quarter_mark > 0
            half_quarter_out_of_50 = half_quarter_mark
          end
          o_mark = first_quarter_out_of_25.to_f+second_quarter_out_of_25.to_f+half_quarter_out_of_50.to_f
          main_mark_student = o_mark
          if f_mark > 0 && o_mark > 0
          #  main_mark_student = (o_mark.to_f/f_mark.to_f)*f_mark_current
          end  


         abort(batch_data.name.strip.to_s)
          if @subject_highest[sub['name'].strip].blank?
            @subject_highest[sub['name'].strip + " " + batch_data.name.strip] = main_mark_student.to_s + " | <br /> Student Info: " + std['class_roll_no'].to_s + "  " + std['first_name'].to_s + "  " + std['last_name'].to_s + " " + batch_data.course.course_name + " " + batch_data.course.section_name
          elsif main_mark_student.to_f > @subject_highest[sub['name'].strip].to_f
            @subject_highest[sub['name'].strip + " " + batch_data.name.strip] = main_mark_student.to_s + " | <br /> Student Info: " + std['class_roll_no'].to_s + "  " + std['first_name'].to_s + "  " + std['last_name'].to_s + " " + batch_data.course.course_name + " " + batch_data.course.section_name
          end
        end 
        @student_total_grade[std['id'].to_i] = total_grade
        if subject_failed == false
          if std_group_name == group_name or connect_exam_id.to_i == @connect_exam_obj.id
            std_marks_full_new = 5000.00-grand_total.to_f
            @student_list << [std_marks_full_new.to_f,std['id'].to_i]
          end 
          if connect_exam_id.to_i == @connect_exam_obj.id
            std_marks_full_new = 5000.00-grand_total.to_f
            @student_list_batch << [std_marks_full_new.to_f,std['id'].to_i]
          end
        end  
        
      end 
      
      
    end  
  end

  @student_position = {}
  @student_position_batch = {}

  unless @student_list.blank?
    position = 0
    @sorted_students = @student_list.sort
    @sorted_students.each do|s|
        position = position+1
        @student_position[s[1].to_i] = position
    end 
  end

  unless @student_list_batch.blank?
    position = 0
    @sorted_students = @student_list_batch.sort
    @sorted_students.each do|s|
        position = position+1
        @student_position_batch[s[1].to_i] = position
    end 
  end
  
 %> 
<style>
    .baf_shaheen table.top-left-center tr.odd td
    {
        padding: 5px !important;  
        font-size: 24px !important;
    }
    .baf_shaheen table.top-left-center tr.even td
    {
        padding: 5px !important; 
        font-size: 24px !important;
    }
 </style>   
<%  
 end
 #abort(subjectss.inspect)
%> 
