<%-# Champs21
#Copyright 2010 teamCreative Private Limited
#
#This product includes software developed at
#Project Champs21 - http://www.champs21.com/
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License. -%>
<% 
  @all_subject_id = []
  @has_exam_score = []
  @all_group_exams = GroupedExam.find(
     :all,
     :conditions => [
       "connect_exam_id = ?",
       @connect_exam_obj.id
     ]
   )
  unless @all_group_exams.blank?
   @all_exam_group_id = @all_group_exams.map(&:exam_group_id).uniq


   @all_exams = Exam.find(
      :all,
      :conditions => ["exam_group_id IN (?)", @all_exam_group_id]
    )


    unless @all_exams.blank?
     @all_subject_id = @all_exams.map(&:subject_id).uniq
     @all_exam_id = @all_exams.map(&:id).uniq
     @exam_score_all = ExamScore.find(
        :all,
        :conditions => ["exam_id IN (?)", @all_exam_id],
        :include => [:exam]
      )
      unless @exam_score_all.blank?
        @exam_score_all.each do |score|
            if !score.marks.blank? and score.marks.to_i!=0 and !@has_exam_score.include?(score.exam_id)
              exammain = score.exam
              unless exammain.blank?
                @has_exam_score << exammain.exam_group_id.to_s+"_"+exammain.subject_id.to_s
              end
            end
        end
      end
    end
   end


  @grouped_exams = GroupedExam.find_all_by_connect_exam_id(@connect_exam_obj.id)
  @exam_group_ids = @grouped_exams.map(&:exam_group_id)
  @ranked_student = ExamScore.all(:select =>["SUM(exam_scores.marks) as total_score,exam_scores.student_id"],:conditions=>["exams.exam_group_id IN (?)",@exam_group_ids,],:joins=>[:exam,:student,:grading_level],:group =>"exam_scores.student_id",:order=>"total_score DESC")
  @ranked_positions = {}
  unless @ranked_student.blank?
    p = 0
    last_total_score = 0
    @ranked_student.each do |ras|
      ranked_std = true
      @report_data['report']['subjects'].each do |sub|
        if ranked_std == false
          break
        end
        subject_full_mark = 0
        subject_obtain_mark = 0
        subjectdata = Subject.find(sub['id'].to_i)
        check_std_subject = StudentsSubject.find_by_student_id_and_subject_id(ras.student_id,sub['id'].to_i)
        if @all_subject_id.include?(sub['id'].to_i) and (!check_std_subject.blank? or subjectdata.elective_group_id.blank?)
          @report_data['report']['exams'].each do |rs|
            %>
            <%= render  :partial=>"/connect_exam/has_exam_score", :locals=>{:exam_group_id=>rs['exam_id'].to_s,:subject_id=>sub['id'].to_s} %>
            <%
            if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][ras.student_id.to_s].blank? and @check_exam_score==true
                subject_full_mark = subject_full_mark+rs['result'][rs['exam_id']][sub['id']][ras.student_id.to_s]['full_mark'].to_i
                subject_obtain_mark = subject_obtain_mark+rs['result'][rs['exam_id']][sub['id']][ras.student_id.to_s]['marks_obtained'].to_f
                if rs['result'][rs['exam_id']][sub['id']][ras.student_id.to_s]['full_mark'].to_i > 0
                  main_mark_sub = (rs['result'][rs['exam_id']][sub['id']][ras.student_id.to_s]['marks_obtained'].to_f/rs['result'][rs['exam_id']][sub['id']][ras.student_id.to_s]['full_mark'].to_f)*100
                  grade = GradingLevel.percentage_to_grade(main_mark_sub, @batch.id)
                  if !grade.blank? and !grade.name.blank?
                    if grade.name == "F"
                      ranked_std = false
                    end
                  end
                end
            end
             
          end
          if subject_full_mark>0
            main_mark = (subject_obtain_mark.to_f/subject_full_mark.to_f)*100
            grade = GradingLevel.percentage_to_grade(main_mark, @batch.id)
            if !grade.blank? and !grade.name.blank? and grade.name == "F"
              ranked_std = false
              break
            end
          end
        end
      end
      if ranked_std == true
        if ras.total_score != last_total_score
          p = p+1
          last_total_score = ras.total_score
        end
        @ranked_positions[ras.student_id.to_i] = p
      end
    end
  end
  @ranked_positions = {}
  
%>
<div id="page-yield" class="available_sections1">
  <div class="page1"> </div>
  <div class="section1 row" >
    <center>
     
      <h4 align="center">Tabulation Sheet, <%= @connect_exam_obj.name %></h4>
      <%= render  :partial=>"/connect_exam/south_point/tabulation_top" %>
     
      <% unless @report_data.blank? %>
      <% c = 'even' %>
      <table id="pdf-table" width="100%" cellspacing="0">
        <tr class="table-header">
          <td class="col-pdf">Roll</td>
          <td class="col-pdf">Students Name</td>
          <% @report_data['report']['subjects'].each do |sub| %>
            <% has_exam = false %>
            <% if @all_subject_id.include?(sub['id'].to_i) %>
              <% has_exam = true %>
            <% end %>
            <% if has_exam == true %>
            <td><%=  sub['code'] %></td>
            <% end %> 
          <% end %> 
          
          
          <td>Total</td>
        
        </tr>
        
        <% extender = 0 %>
        <% std_count = 0 %>
        <% j = 0 %>
      
        <% @report_data['report']['students'].each do |std| %>
          <% j = j+1 %>
          <%  std_count = std_count+1; %>
          <% if std_count>8 && extender ==0 %>
              <% std_count = 0 %>
              <% extender = 1 %>
              <tr class="page-break">
                  <td colspan="100">&nbsp;</td>
              </tr>  
              <tr class="table-header">
                <td class="col-pdf">Roll</td>
                <td class="col-pdf">Students Name</td>
                <% @report_data['report']['subjects'].each do |sub| %>
                    <% has_exam = false %>
                    <% if @all_subject_id.include?(sub['id'].to_i) %>
                      <% has_exam = true %>
                    <% end %>
                    <% if has_exam == true %>
                    <td><%=  sub['code'] %></td>
                    <% end %> 
                  <% end %> 

                <td>Total</td>

              </tr>
          <% elsif std_count>9 && extender ==1 %>
              <% std_count = 0 %>
              <% extender = 1 %>
              <tr class="page-break2-bf">
                  <td colspan="100">&nbsp;</td>
              </tr> 
              <tr class="table-header">
                <td class="col-pdf">Roll</td>
                <td class="col-pdf">Students Name</td>
                <% @report_data['report']['subjects'].each do |sub| %>
                    <% has_exam = false %>
                    <% if @all_subject_id.include?(sub['id'].to_i) %>
                      <% has_exam = true %>
                    <% end %>
                    <% if has_exam == true %>
                    <td><%=  sub['code'] %></td>
                    <% end %> 
                  <% end %> 

                <td>Total</td>

              </tr>
          <% end %>    
        
          <% total_sub = @report_data['report']['subjects'].count %>
          
          <tr class="<%= cycle(c,(["odd","even"]-[c]).first) %>">
            <td class="name"><%= std['class_roll_no'] %></td>
            <% if !std['first_name'].blank? and !std['last_name'].blank?  %>
            <td class="name-std"><%= std['first_name']+" "+std['last_name'] %></td>
            <% elsif !std['first_name'].blank? %>
            <td class="name-std"><%= std['first_name'] %></td>
            <% else %>
            <td class="name-std"><%= "-" %></td>
            <% end %>
            <% total_mark = 0 %>
            <% grades = [] %>
            <% grade_count = {} %>
            <% @report_data['report']['subjects'].each do |sub| %>
                  <% has_exam = false %>
                  <% if @all_subject_id.include?(sub['id'].to_i) %>
                     <% has_exam = true %>
                  <% end %>
                  <% if has_exam == false %>
                    <% next %>
                  <% end %>
                  <% subject_full_mark = 0 %>
                  <% subject_obtain_mark = 0 %>
            
                  <% subject_mark_final = 0 %>
                  <% subject_mark_midterm = 0 %>
                  
                  <% iloop = 0  %>
                  <td>
                      
                  <%
                    subject_count_std = subject_count_std+1
                    std_subject_marks_final = 0
                    final_assignent = 0
                    mid_assignment = 0
                    final_term = 0
                    mid_term = 0
                    class_test = []
                    @report_data['report']['exams'].each do |rs|
                      if rs['exam_category'] != '1' or rs['quarter'] != '6'
                        next
                      end  
                      if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?
                        obt_mark = (rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f/rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f)*7.5
                        class_test << obt_mark.round(2)
                      else
                        class_test << 0
                      end  
                    end 
                    class_test.sort! {|x,y| y <=> x }
                    std_subject_marks_final = class_test[0].to_f+class_test[1].to_f+class_test[2].to_f
                    @report_data['report']['exams'].each do |rs|
                      if rs['exam_category'] == '1' or rs['exam_category'] == '3' or rs['quarter'] != '6'
                        next
                      end  
                      if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?
                        obt_mark = (rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f/rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f)*2.5
                        std_subject_marks_final = std_subject_marks_final+obt_mark.to_f
                      end  
                    end
                    std_subject_marks_final = std_subject_marks_final.round()
                    final_assignent = std_subject_marks_final

                    @report_data['report']['exams'].each do |rs|
                      if rs['exam_category'] != '3' or rs['quarter'] != '6'
                        next
                      end  
                      if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?
                        obt_mark = rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f*2
                        final_term = obt_mark
                        std_subject_marks_final = std_subject_marks_final+obt_mark.to_f
                      end  
                    end

                    std_subject_marks_mid = 0
                    class_test = []


                    @report_data['report']['exams'].each do |rs|
                      if rs['exam_category'] != '1' or rs['quarter'] == '6'
                        next
                      end  
                      if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?
                        obt_mark = (rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f/rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f)*7.5
                        class_test << obt_mark.round(2)
                      else
                        class_test << 0
                      end  
                    end 
                    class_test.sort! {|x,y| y <=> x }
                    std_subject_marks_mid = class_test[0].to_f+class_test[1].to_f+class_test[2].to_f
                    @report_data['report']['exams'].each do |rs|
                      if rs['exam_category'] == '1' or rs['exam_category'] == '3' or rs['quarter'] == '6'
                        next
                      end  
                      if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?
                        obt_mark = (rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f/rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f)*2.5
                        
                        std_subject_marks_mid = std_subject_marks_mid+obt_mark.to_f
                      end  
                    end
                    std_subject_marks_mid = std_subject_marks_mid.round()
                    mid_assignment = std_subject_marks_mid

                    @report_data['report']['exams'].each do |rs|
                      if rs['exam_category'] != '3' or rs['quarter'] == '6'
                        next
                      end  
                      if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?
                        obt_mark = rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                        mid_term = obt_mark
                        std_subject_marks_mid = std_subject_marks_mid+obt_mark.to_f
                      end  
                    end
                    subject_obtain_mark = ((std_subject_marks_final.to_f*30)/100)+((std_subject_marks_mid.to_f*70)/100)
                
                  %>    
                      
                        A : <%= final_assignent %> | F :<%= final_term %><hr/>
                        A : <%= mid_assignment %> | M :<%= mid_term %>
                        <hr/>T:<%= subject_obtain_mark.to_i %>
                     
                       <%  grade = GradingLevel.percentage_to_grade(subject_obtain_mark, @batch.id) %>
                       <% if !grade.blank? and !grade.name.blank? %>
                           <%
                              if grades.include?(grade.name.to_s)
                                grade_count[grade.name.to_s] = grade_count[grade.name.to_s]+1
                              else
                                grades << grade.name.to_s
                                grade_count[grade.name.to_s] = 1
                              end  
                           %>
                        
                       <% end %>
                      
                  </td>   
                       
                           
                    
                     
             <% end %> 
                
            
              <td>
                   <%= total_mark %>    
              </td>
            
              
           
        </tr>
        <% @std_info = std %>
        <% @std_id_comment = std['id'] %>
        <%= render  :partial=>"/connect_exam/comment_input" %>
        <% end %><% end %>
      </table>
      <% end %>
    </center>
  </div>
  
  
</div>
