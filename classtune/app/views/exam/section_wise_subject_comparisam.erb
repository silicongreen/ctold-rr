<%
@graph_data = []
temp_data = []
temp_data << "Section"
unless @grading_levels.empty?
  @grading_levels.each do |grade|
    temp_data << grade.name
  end
  end
i = 0
@graph_data << temp_data
batch_loop = 0
unless @tabulation_data.blank?
  @tabulation_data['report'].each do |tab|
    batch = Batch.find_by_id(@tabulation_data['batches'][batch_loop],:include=>[:course]) 
    unless batch.blank?
      temp_data = []
      temp_data << batch.course.section_name
      @grade_count = {} 
      if @connect_exam_obj.result_type == 15
        tab['students'].each do |std|
          subject_failed = []
          elective_group_ids = []
          tab['subjects'].each do |subjects_main| 

            if subjects_main['elective_group_id'].to_i == 0 || @subject.code != subjects_main['code']
            next
              end
            if elective_group_ids.include?(subjects_main['elective_group_id'].to_i)
            next
              end
            elective_group_ids << subjects_main['elective_group_id'].to_i
            subject_elective = []
            tab['subjects'].each do |subjects_all|
              if subjects_all['elective_group_id'].to_i == subjects_main['elective_group_id'].to_i
                subject_elective << subjects_all
              end
              end

            full_mark = 0
            obtain_mark = 0
            subject_elective.each do |sub|
              subjectdata = Subject.find(sub['id'].to_i) %>
              <%= render  :partial=>"/connect_exam/check_student_subject", :locals=>{:student_id=>std['id'].to_s,:subject_id=>sub['id'].to_s,:elective_group_id=>subjectdata.elective_group_id.to_i} %>
              <%
              if @has_exam_student == false
              next
                end
              unless tab['exams'].blank?  
                tab['exams'].each do |report|
                  if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank? 
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                      full_mark = full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                      end
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                      obtain_mark = obtain_mark+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    end
                  end
                end
              end
              end
            if full_mark > 0
              if obtain_mark.to_f>0 and full_mark.to_f>0
                marktotal = (obtain_mark.to_f/full_mark.to_f)*100 
                else
                marktotal = 0
                end
              grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
              if !grade.blank? and !grade.name.blank?

                if @grade_count[grade.name].blank?
                  @grade_count[grade.name] = 1
                  else
                  @grade_count[grade.name] = @grade_count[grade.name]+1
                end

              end
            end

          end

        end
        elsif @connect_exam_obj.result_type != 6 && @connect_exam_obj.result_type != 11
        tab['students'].each do |std| 
          subject_failed = []
          tab['subjects'].each do |sub| 
            subjectdata = Subject.find(sub['id'].to_i)
            check_std_subject = StudentsSubject.find_by_student_id_and_subject_id(std['id'],sub['id'].to_i)
            if (check_std_subject.blank? and !subjectdata.elective_group_id.blank?)  || @subject.code != sub['code']
            next 
              end 

            full_mark1 = 0
            obtain_mark1 = 0
            full_mark2 = 0
            obtain_mark2 = 0
            full_mark3 = 0
            obtain_mark3 = 0
            full_mark4 = 0
            obtain_mark4 = 0
            unless tab['exams'].blank?  
              tab['exams'].each do |report|
                if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank?
                  if (report['quarter'].to_i == 1 or report['quarter'].to_i == 4) and report['exam_category'].to_i == 1
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                      full_mark1 = full_mark1+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                      end
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                      obtain_mark1 = obtain_mark1+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    end
                    end
                  if report['quarter'].to_i == 3 and report['exam_category'].to_i != 1
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                      full_mark2 = full_mark2+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                      end
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                      obtain_mark2 = obtain_mark2+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    end
                    end
                  if (report['quarter'].to_i == 2 or report['quarter'].to_i == 5) and report['exam_category'].to_i == 1
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                      full_mark3 = full_mark3+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                      end
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                      obtain_mark3 = obtain_mark3+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    end
                    end
                  if report['quarter'].to_i == 6 and report['exam_category'].to_i != 1
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                      full_mark4 = full_mark4+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                      end
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                      obtain_mark4 = obtain_mark4+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    end
                  end
                end
              end
              end
            if full_mark4 > 0
              if obtain_mark1.to_f>0 and full_mark1.to_f>0
                main_mark1 = (obtain_mark1.to_f/full_mark1.to_f)*40 
                else
                main_mark1 = 0
                end
              if obtain_mark2.to_f>0 and full_mark2.to_f>0
                main_mark2 = (obtain_mark2.to_f/full_mark2.to_f)*60 
                else
                main_mark2 = 0
                end
              if obtain_mark3.to_f>0 and full_mark3.to_f>0
                main_mark3 = (obtain_mark3.to_f/full_mark3.to_f)*40 
                else
                main_mark3 = 0
                end
              if obtain_mark4.to_f>0 and full_mark4.to_f>0
                main_mark4 = (obtain_mark4.to_f/full_mark4.to_f)*60 
                else
                main_mark4 = 0
                end

              firstterm = main_mark1+main_mark2
              if firstterm > 0
                firstterm = (firstterm.to_f/100)*40
                end
              finalterm = main_mark3+main_mark4
              if firstterm > 0
                finalterm = (finalterm.to_f/100)*60
                end
              marktotal = firstterm+finalterm
              grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
              if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                subject_failed << sub['name']
              end
              elsif full_mark3 > 0
              if obtain_mark3.to_f>0 and full_mark3.to_f>0
                marktotal = (obtain_mark3.to_f/full_mark3.to_f)*100 
                else
                marktotal = 0
                end
              grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
              if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                subject_failed << sub['name']
              end
              elsif full_mark2 > 0
              if obtain_mark1.to_f>0 and full_mark1.to_f>0
                main_mark1 = (obtain_mark1.to_f/full_mark1.to_f)*40 
                else
                main_mark1 = 0
                end
              if obtain_mark2.to_f>0 and full_mark2.to_f>0
                main_mark2 = (obtain_mark2.to_f/full_mark2.to_f)*60 
                else
                main_mark2 = 0
                end
              marktotal = main_mark1+main_mark2
              grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
              if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                subject_failed << sub['name']
              end
              else
              if obtain_mark1.to_f>0 and full_mark1.to_f>0
                marktotal = (obtain_mark1.to_f/full_mark1.to_f)*100 
                else
                marktotal = 0
                end
              grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
              if !grade.blank? and !grade.name.blank?
                if @grade_count[grade.name].blank?
                  @grade_count[grade.name] = 1
                  else
                  @grade_count[grade.name] = @grade_count[grade.name]+1
                end
              end
            end

          end

        end
        else
        tab['students'].each do |std| 
          subject_failed = []
          tab['subjects'].each do |sub| 
            subjectdata = Subject.find(sub['id'].to_i)
            check_std_subject = StudentsSubject.find_by_student_id_and_subject_id(std['id'],sub['id'].to_i)
            if (check_std_subject.blank? and !subjectdata.elective_group_id.blank?)  || @subject.code != sub['code']
            next 
              end 

            full_mark1 = 0
            obtain_mark1 = 0
            full_mark2 = 0
            obtain_mark2 = 0
            full_mark3 = 0
            obtain_mark3 = 0
            full_mark4 = 0
            obtain_mark4 = 0
            unless tab['exams'].blank?  
              tab['exams'].each do |report|
                if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank?

                  if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                    full_mark1 = full_mark1+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                    end
                  if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                    obtain_mark1 = obtain_mark1+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                  end

                end
              end
              end

            if obtain_mark1.to_f>0 and full_mark1.to_f>0
              marktotal = (obtain_mark1.to_f/full_mark1.to_f)*100 
              else
              marktotal = 0
              end
            grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
            if !grade.blank? and !grade.name.blank?
              if @grade_count[grade.name].blank?
                @grade_count[grade.name] = 1
                else
                @grade_count[grade.name] = @grade_count[grade.name]+1
              end
            end


          end

        end
        end
      unless @grading_levels.empty?
        @grading_levels.each do |grade|
          unless @grade_count[grade.name].blank?
            temp_data << @grade_count[grade.name]
            else
            temp_data << 0
          end 
          end
        @graph_data << temp_data
      end
      end
    batch_loop = batch_loop+1
  end
  end
%>
<html>
    <head>
        <title>Section Wise Comparison</title>
        <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
        <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/js/bootstrap.min.js"></script>
        <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">
          google.charts.load('current', {'packages': ['corechart']});
          google.charts.setOnLoadCallback(drawVisualization);

          function drawVisualization() {
              // Some raw data (not necessarily accurate)
              var data = google.visualization.arrayToDataTable(<%= @graph_data.to_json %>);

              var options = {
                  title: 'Section Wise Comparison',
                  vAxis: {title: 'Number Of Grade'},
                  hAxis: {title: 'Sections'},
                  seriesType: 'bars',
                  series: {5: {type: 'line'}}
              };

              var chart = new google.visualization.ComboChart(document.getElementById('chart_div'));
              chart.draw(data, options);
          }
        </script>
    </head>
    <body>

        <div class="container">
            <div class="row">
                <div class="col-md-12">

                    <div class="panel panel-default">

                        <div class="panel panel-primary">


                            <div class="text-center">
                                <h3 style="color:#2C3E50" >Section Wise Grade Comparison</h3>
                                <h4> <label for="Choose Report"  style="color:green">Class : <%= @batch.course.course_name %></label></h4>
                                <h4> <label for="Choose Report"  style="color: green">Subject : <%= @subject.name %></label></h4>
                                
                                <div id="chart_div" style="width: 900px; height: 500px;"></div>

                            </div>                 

                        </div>
                    </div>
                </div>
            </div>  
        </div>  

    </body>
</html>
