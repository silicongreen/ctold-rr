<%-# Champs21
#Copyright 2010 teamCreative Private Limited
#
#This product includes software developed at
#Project Champs21 - http://www.champs21.com/
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0 
#
#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License. -%>
<div id="page-yield" class="available_sections1" style="width: 2300px;">
  <div class="page1"> </div>
  <div class="section1 row" >
    <center>
      <div id="pdf-header-south" class="general-header">
        <h4 align="center"><%= wicked_pdf_image_tag "/"+("#{Rails.root}/"+ (current_school_detail.logo.path||"public/images/application/c.png")),:width=> '4%' %></h4>
        <h2 align="center"><%=Configuration.get_config_value('InstitutionName'); %></h2>
      </div>
      <h4 align="center">Tabulation Sheet, <%= @connect_exam_obj.name %></h4>
      <%= render  :partial=>"/connect_exam/south_point/tabulation_top" %>
     
      <% unless @report_data.blank? %>
      <% c = 'even' %>
      <table id="pdf-table" width="99%" cellspacing="0">
        <tr class="table-header">
          <td class="col-pdf">Sl.</td>
          <td class="col-pdf">Roll</td>
          <td class="col-pdf">Students Name</td>
          <td class="col-pdf">Term</td>
          <% @report_data['report']['subjects'].each do |sub| %>
            <td><%=  sub['code'] %><hr/>Marks&nbsp;&nbsp;|&nbsp;&nbsp;Grd</td>
          <% end %> 
          <% @report_data['report']['no_exam_subject_resutl'].each do |sub| %>
            <td><%=  sub['code'] %></td>
          <% end %> 
          
          <td>Total</td>
          <td>Grade Count</td>
          <% unless @student_position.blank? %>
                              <td>Position</td>
                           <% end %>
        
        </tr>
        
        <% extender = 0 %>
        <% std_count = 0 %>
        <% j = 0 %>
        <% cnt_first = 7 %>    
        
        <% @report_data['report']['students'].each do |std| %>
          <% j = j+1 %>
          <%  std_count = std_count+1; %>
          <% if std_count>cnt_first && extender ==0 %>
              <% std_count = 0 %>
              <% extender = 1 %>
              <tr>
                  <td style="height: 31px;" colspan="100">&nbsp;</td>
              </tr>  
              <tr class="table-header">
                <td class="col-pdf">Sl.</td>
                <td class="col-pdf">Roll</td>
                <td class="col-pdf">Students Name</td>
                <td class="col-pdf">Term</td>
                <% @report_data['report']['subjects'].each do |sub| %>
                  <td><%=  sub['code'] %><hr/>Marks&nbsp;&nbsp;|&nbsp;&nbsp;Grd</td>
                <% end %> 
                <% @report_data['report']['no_exam_subject_resutl'].each do |sub| %>
                  <td><%=  sub['code'] %></td>
                <% end %> 

                <td>Total</td>
                <td>Grade Count</td>
                <% unless @student_position.blank? %>
                              <td>Position</td>
                           <% end %>

              </tr>
          <% elsif std_count>7 && extender ==1 %>
              <% std_count = 0 %>
              <% extender = 1 %>
              <tr class="page-break3">
                  <td colspan="100">&nbsp;</td>
              </tr>
              <tr class="table-header">
                <td class="col-pdf">Sl.</td>
                <td class="col-pdf">Roll</td>
                <td class="col-pdf">Students Name</td>
                <td class="col-pdf">Term</td>
                <% @report_data['report']['subjects'].each do |sub| %>
                  <td><%=  sub['code'] %><hr/>Marks&nbsp;&nbsp;|&nbsp;&nbsp;Grd</td>
                <% end %> 
                <% @report_data['report']['no_exam_subject_resutl'].each do |sub| %>
                  <td><%=  sub['code'] %></td>
                <% end %> 

                <td>Total</td>
                <td>Grade Count</td>
                <% unless @student_position.blank? %>
                              <td>Position</td>
                           <% end %>

              </tr>
          <% end %>    
        
          
          
          <tr class="odd">
            <td class="col-pdf"><%= j %></td>
            <td class="name"><%= std['class_roll_no'] %></td>
            <td class="name-std" style="text-align: left; white-space: pre-wrap; !important;"><%= std['first_name'].to_s+" "+std['last_name'].to_s %></td>
            <td class="name-std">M1<hr/>M2<hr/>M3<hr/>AVG<hr/>CMB</td>
            <% total_mark = 0 %>
            <% q1_mark = 0 %>
            <% q2_mark = 0 %>
            <% q3_mark = 0 %>
            <% f_mark = 0 %>
            <% tf_mark = 0 %>
            <% cmb_mark = 0 %>
            
            
            <% grades1 = [] %>
            <% grade_count1 = {} %>
            <% grades2 = [] %>
            <% grade_count2 = {} %>
            <% grades3 = [] %>
            <% grade_count3 = {} %>
            
            <% grades4 = [] %>
            <% grade_count4 = {} %>

            <% grades5 = [] %>
            <% grade_count5 = {} %>
            
            <% grades = [] %>
            <% grade_count = {} %>
            <% @report_data['report']['subjects'].each do |sub| %>
                  <% subjectdata = Subject.find(sub['id'].to_i) %>
                  <% check_std_subject = StudentsSubject.find_by_student_id_and_subject_id(std['id'],sub['id'].to_i) %>
                  <% if check_std_subject.blank? and !subjectdata.elective_group_id.blank? %>
                    <td>&nbsp;</td>
                  <% else %>
                      <% obtained_mark = 0 %>
                      <% full_mark = 0 %>
                      <% highest_mark = 0 %>


                      <% st_full_mark1 = 0 %>
                      <% ct_full_mark1 = 0 %>

                      <% st_marks1 = [] %>
                      <% ct_marks1 = [] %>
                      <% avg_mark_st1 = 0; %>
                      <% avg_mark_ct1 = 0; %>
                      <% full_mark1 = 0 %>

                      <% st_full_mark2 = 0 %>
                      <% ct_full_mark2 = 0 %>

                      <% st_marks2 = [] %>
                      <% ct_marks2 = [] %>
                      <% avg_mark_st2 = 0; %>
                      <% avg_mark_ct2 = 0; %>
                      <% full_mark2 = 0 %>

                      <% st_full_mark3 = 0 %>
                      <% ct_full_mark3 = 0 %>

                      <% st_marks3 = [] %>
                      <% ct_marks3 = [] %>
                      <% avg_mark_st3 = 0; %>
                      <% avg_mark_ct3 = 0; %>
                      <% full_mark3 = 0 %>

                      <% st_full_mark4 = 0 %>
                      <% ct_full_mark4 = 0 %>

                      <% st_marks4 = [] %>
                      <% ct_marks4 = [] %>
                      <% avg_mark_st4 = 0; %>
                      <% avg_mark_ct4 = 0; %>
                      <% full_mark4 = 0 %>

                      <% first_term_mark = 0 %>
                      <% first_term_ab = false %>
                      <% first_term_full_mark = 0 %>
                      <% first_term_avg_mark = 0 %>

                      <% final_term_mark = 0 %>
                      <% final_term_ab = false %>
                      <% final_term_full_mark = 0 %>
                      <% final_term_avg_mark = 0 %>
                      <%
                        mock1 = 0
                        mock2 = 0
                        mock1_full_mark = 0
                        mock2_full_mark = 0
                        mock3 = 0
                        mock3_full_mark = 0
                        mock_number = 1
                      %>
                      <% 
                            unless @report_data['report']['exams'].blank?  
                             @report_data['report']['exams'].each do |report|
                               if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank?

                                  #Calculation First Quarter Mark
                                  if report['quarter'] == '1'
                                     if st_full_mark1 == 0 and report['exam_category'] == '4'
                                       if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                         st_full_mark1 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                       end
                                     end                     
                                     if ct_full_mark1 == 0 and report['exam_category'] == '1'
                                       if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                         ct_full_mark1 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                       end
                                     end

                                     if report['exam_category'] == '4'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                         st_marks1 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                      else
                                         st_marks1 << 0
                                      end      
                                     end

                                     if report['exam_category'] == '1'
                                       if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                          ct_marks1 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                       else
                                          ct_marks1 << 0
                                       end      
                                     end
                                  end 

                                  #Calculation 2nd Quarter Mark
                                  if report['quarter'] == '2'
                                     if st_full_mark2 == 0 and report['exam_category'] == '4'
                                       if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                         st_full_mark2 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                       end
                                     end                     
                                     if ct_full_mark2 == 0 and report['exam_category'] == '1'
                                       if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                         ct_full_mark2 = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                       end
                                     end

                                     if report['exam_category'] == '4'
                                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                         st_marks2 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                      else
                                         st_marks2 << 0
                                      end      
                                     end

                                     if report['exam_category'] == '1'
                                       if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                          ct_marks2 << report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                       else
                                          ct_marks2 << 0
                                       end      
                                     end
                                  end


                                   

                                  #Calculation First Term (40/20) Mark
                                  if report['quarter'] == '5'
                                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                       first_term_full_mark = report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                       if(first_term_full_mark == 100)
                                         first_term_full_mark = 40
                                       else
                                         first_term_full_mark = 20
                                       end
                                    end
                                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                       first_term_mark = report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                    else
                                       first_term_ab = true
                                    end
                                    
                                    unless first_term_ab == true
                                      if first_term_full_mark == 40
                                        first_term_mark = (first_term_mark/100)*40
                                      else
                                        first_term_mark = (first_term_mark/50)*20
                                      end
                                    end

                                  end

                                  
                                  #Calculation Final Term Mark
                                  if report['exam_category'] == '6'
                                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                                      final_term_full_mark = final_term_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      if mock_number == 1
                                        mock1_full_mark = mock1_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      elsif mock_number == 2
                                        mock2_full_mark = mock2_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      else
                                        mock3_full_mark = mock3_full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                                      end
                                    end
                                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                                       final_term_mark = final_term_mark+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                       if mock_number == 1
                                         mock1 = mock1+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                       elsif mock_number == 2
                                         mock2 = mock2+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                       else
                                         mock3 = mock3+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                                       end
                                    end
                                    mock_number = mock_number+1
                                    

                                  end

                               end

                            end
                          end

                          #Calculation First Quarter Mark
                          st_marks1.sort! {|x,y| y <=> x }
                          ct_marks1.sort! {|x,y| y <=> x }

                          if ct_full_mark1.to_i == 20 
                              avg_mark_ct1 = (ct_marks1[0].to_f+ct_marks1[1].to_f)/2
                          else 
                              avg_mark_ct1 = ct_marks1[0].to_f
                          end 

                          if st_full_mark1.to_i == 10 
                              avg_mark_st1 = (st_marks1[0].to_f+st_marks1[1].to_f+st_marks1[2].to_f)/3
                          else st_full_mark1.to_i == 5  
                              avg_mark_st1 = (st_marks1[0].to_f+st_marks1[1].to_f)/2
                          end

                          obtained_mark1 = avg_mark_ct1.to_f+avg_mark_st1.to_f
                          full_mark1 = ct_full_mark1.to_i+st_full_mark1.to_i

                          main_mark1 = (obtained_mark1.round().to_f/full_mark1.to_f)*100

                          #Calculation 2nd Quarter Mark
                          st_marks2.sort! {|x,y| y <=> x }
                          ct_marks2.sort! {|x,y| y <=> x }

                          if ct_full_mark2.to_i == 20 
                              avg_mark_ct2 = (ct_marks2[0].to_f+ct_marks2[1].to_f)/2
                          else 
                              avg_mark_ct2 = ct_marks2[0].to_f
                          end 

                          if st_full_mark2.to_i == 10 
                              avg_mark_st2 = (st_marks2[0].to_f+st_marks2[1].to_f+st_marks2[2].to_f)/3
                          else st_full_mark2.to_i == 5  
                              avg_mark_st2 = (st_marks2[0].to_f+st_marks2[1].to_f)/2
                          end

                          obtained_mark2 = avg_mark_ct2.to_f+avg_mark_st2.to_f
                          full_mark2 = ct_full_mark2.to_i+st_full_mark2.to_i
                          main_mark2 = (obtained_mark2.round().to_f/full_mark2.to_f)*100

                          
                          main_mark_first_term=0
                          main_mark_only_final_term=0

                          #Calculation First Term (40/20) Mark
                          full_mark_first_term = full_mark1+full_mark2+first_term_full_mark
                          obtained_mark_first_term = obtained_mark1.round()+obtained_mark2.round()+first_term_mark.round()
                          main_mark_first_term = (obtained_mark_first_term.round().to_f/full_mark_first_term.to_f)*100
                          
                          main_mark_only_first_term = (first_term_mark.round().to_f/first_term_full_mark.to_f)*100


                          main_mark_only_final_term = (final_term_mark.round().to_f/final_term_full_mark.to_f)*100
                          m_mark = 0
                          if main_mark_first_term.blank?
                            main_mark_first_term=0
                          end
                          if main_mark_only_final_term.blank?
                            main_mark_only_final_term=0
                          end
                          if main_mark_first_term.to_i > 0
                            m_mark = m_mark+main_mark_first_term.round().to_f 
                          end
                          if main_mark_only_final_term.to_i > 0
                            m_mark = m_mark+main_mark_only_final_term.round().to_f 
                          end
                          main_mark = (m_mark)/2
                          
                          main_mark_mock1 = 0
                          main_mark_mock2 = 0
                          main_mark_mock3 = 0
                          if mock1 > 0
                            main_mark_mock1 = (mock1.to_f/mock1_full_mark)*100
                          end
                          if mock2 > 0
                            main_mark_mock2 = (mock2.to_f/mock2_full_mark)*100
                          end
                          if mock3 > 0
                            main_mark_mock3 = (mock3.to_f/mock3_full_mark)*100
                          end

                          grade_name1 = "-"
                          grade_name2 = "-"
                          grade_name3 = "-"
                          grade_name4  = "-"
                          grade_name5 = "-"
                          grade_name  = "-"

                          grade = GradingLevel.percentage_to_grade(main_mark_mock1, @batch.id)
                          if !grade.blank? and !grade.name.blank?
                            grade_name1 = grade.name
                            if grades1.include?(grade.name.to_s)
                              grade_count1[grade.name.to_s] = grade_count1[grade.name.to_s]+1
                            else
                              grades1 << grade.name.to_s
                              grade_count1[grade.name.to_s] = 1
                            end
                          end

                          grade = GradingLevel.percentage_to_grade(main_mark_mock2, @batch.id)
                          if !grade.blank? and !grade.name.blank?
                            grade_name2 = grade.name
                            if grades2.include?(grade.name.to_s)
                              grade_count2[grade.name.to_s] = grade_count2[grade.name.to_s]+1
                            else
                              grades2 << grade.name.to_s
                              grade_count2[grade.name.to_s] = 1
                            end
                          end

                          grade = GradingLevel.percentage_to_grade(main_mark_mock3, @batch.id)
                          if !grade.blank? and !grade.name.blank?
                            grade_name3 = grade.name
                            if grades3.include?(grade.name.to_s)
                              grade_count3[grade.name.to_s] = grade_count3[grade.name.to_s]+1
                            else
                              grades3 << grade.name.to_s
                              grade_count3[grade.name.to_s] = 1
                            end
                          end

                          grade = GradingLevel.percentage_to_grade(main_mark_only_final_term, @batch.id)
                          if !grade.blank? and !grade.name.blank?
                            grade_name4 = grade.name
                            if grades4.include?(grade.name.to_s)
                              grade_count4[grade.name.to_s] = grade_count4[grade.name.to_s]+1
                            else
                              grades4 << grade.name.to_s
                              grade_count4[grade.name.to_s] = 1
                            end
                          end

                          grade = GradingLevel.percentage_to_grade(main_mark_only_first_term, @batch.id)
                          if !grade.blank? and !grade.name.blank?
                            grade_name5 = grade.name
                            if grades5.include?(grade.name.to_s)
                              grade_count5[grade.name.to_s] = grade_count5[grade.name.to_s]+1
                            else
                              grades5 << grade.name.to_s
                              grade_count5[grade.name.to_s] = 1
                            end
                          end

                          grade = GradingLevel.percentage_to_grade(main_mark, @batch.id)
                          if !grade.blank? and !grade.name.blank?
                            grade_name = grade.name
                            if grades.include?(grade.name.to_s)
                              grade_count[grade.name.to_s] = grade_count[grade.name.to_s]+1
                            else
                              grades << grade.name.to_s
                              grade_count[grade.name.to_s] = 1
                            end
                          end

                          total_mark = total_mark+obtained_mark


                      %>
                      <td>
                        <%
                        q1_mark = q1_mark+mock1.round()
                        q2_mark = q2_mark+mock2.round()
                        q3_mark = q3_mark+mock3.round()
                        tf_mark = tf_mark+main_mark_only_final_term.round()
                        cmb_mark = cmb_mark+main_mark.round()

                        %>
                          <%= mock1.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name1+"<hr/>" %>
                          <%= mock2.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name2+"<hr/>" %>
                          <%= mock3.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name3+"<hr/>" %>
                          <%= main_mark_only_final_term.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name4+"<hr/>" %>
                          <%= main_mark.round().to_s+"&nbsp;&nbsp;|&nbsp;&nbsp;"+grade_name %>
                          
                          

                        </td> 
                    <% end %>    
            <% end %> 
            <% @report_data['report']['no_exam_subject_resutl'].each do |sub| %>
                    
                     <td>
                       <% if !sub['subject_comment1'].blank? && !sub['subject_comment1'][std['id']].blank? %>
                          <%
                            if !sub['subject_comment1'][std['id']].blank?
                              if grades1.include?(sub['subject_comment1'][std['id']].to_s)
                                grade_count1[sub['subject_comment1'][std['id']]] = grade_count1[sub['subject_comment1'][std['id']]]+1
                              else
                                grades1 << sub['subject_comment1'][std['id']].to_s
                                grade_count1[sub['subject_comment1'][std['id']].to_s] = 1
                              end 
                            end 
                           %>
                          <%=  sub['subject_comment1'][std['id']] %>
                        <% else %>
                          &nbsp;
                        <% end %>  
                        <hr/>
                         
                       <% if !sub['subject_comment2'].blank? && !sub['subject_comment2'][std['id']].blank? %>
                          <%
                            if !sub['subject_comment2'][std['id']].blank?
                              if grades2.include?(sub['subject_comment2'][std['id']].to_s)
                                grade_count2[sub['subject_comment2'][std['id']]] = grade_count2[sub['subject_comment2'][std['id']]]+1
                              else
                                grades2 << sub['subject_comment2'][std['id']].to_s
                                grade_count2[sub['subject_comment2'][std['id']].to_s] = 1
                              end 
                            end 
                           %>
                          <%=  sub['subject_comment2'][std['id']] %>
                        <% else %>
                          &nbsp;
                        <% end %> 
                        <hr/>
                        
                        <% if !sub['subject_comment5'].blank? && !sub['subject_comment5'][std['id']].blank? %>
                          <%
                            if !sub['subject_comment5'][std['id']].blank?
                              if grades3.include?(sub['subject_comment5'][std['id']].to_s)
                                grade_count3[sub['subject_comment5'][std['id']]] = grade_count3[sub['subject_comment5'][std['id']]]+1
                              else
                                grades3 << sub['subject_comment5'][std['id']].to_s
                                grade_count3[sub['subject_comment5'][std['id']].to_s] = 1
                              end 
                            end 
                           %>
                          <%=  sub['subject_comment5'][std['id']] %>
                        <% else %>
                          &nbsp;
                        <% end %> 
                         <hr/>
                          
                          &nbsp; 
                         <hr/>
                         
                         
                         
                         
                       <% if !sub['subject_comment'][std['id']].nil? && !sub['subject_comment'][std['id']].blank? %>
                          <%
                            if !sub['subject_comment'][std['id']].blank?
                              if grades.include?(sub['subject_comment'][std['id']].to_s)
                                grade_count[sub['subject_comment'][std['id']]] = grade_count[sub['subject_comment'][std['id']]]+1
                              else
                                grades << sub['subject_comment'][std['id']].to_s
                                grade_count[sub['subject_comment'][std['id']].to_s] = 1
                              end 
                            end 
                           %>
                          <%=  sub['subject_comment'][std['id']] %>
                        <% else %>
                          &nbsp;
                        <% end %>
                     </td>
                    
              <% end %>
              <td>
                
                  <%= q1_mark.round().to_s+"<hr/>" %> 
                  <%= q2_mark.round().to_s+"<hr/>" %> 
                  <%= q3_mark.round().to_s+"<hr/>" %> 
                  <%= tf_mark.round().to_s+"<hr/>" %> 
                  <%= cmb_mark.round().to_s %> 
                  
              </td>
              <td class="no-warp">
                  <% i = 1 %>
                  <% total_grade_std = grades1.count  %>
                  <% grades1.each do |grade| %>
                      <%= grade.to_s+"-"+grade_count1[grade].to_s %>
                      <% if i!=total_grade_std %>
                      ,
                      <% end %>
                      <% i = i+1 %>
                  <% end %>
                  <hr/>    
                  <% i = 1 %>
                  <% total_grade_std = grades2.count  %>
                  <% grades2.each do |grade| %>
                      <%= grade.to_s+"-"+grade_count2[grade].to_s %>
                      <% if i!=total_grade_std %>
                      ,
                      <% end %>
                      <% i = i+1 %>
                  <% end %>
                  <hr/> 
                  
                  <% i = 1 %>
                  <% total_grade_std = grades3.count  %>
                  <% grades3.each do |grade| %>
                      <%= grade.to_s+"-"+grade_count3[grade].to_s %>
                      <% if i!=total_grade_std %>
                      ,
                      <% end %>
                      <% i = i+1 %>
                  <% end %>
                  <hr/>
                  <% i = 1 %>
                  <% total_grade_std = grades4.count  %>
                  <% grades4.each do |grade| %>
                      <%= grade.to_s+"-"+grade_count4[grade].to_s %>
                      <% if i!=total_grade_std %>
                      ,
                      <% end %>
                      <% i = i+1 %>
                  <% end %>
                  <hr/>
                  <% i = 1 %>
                  <% total_grade_std = grades.count  %>
                  <% grades.each do |grade| %>
                      <%= grade.to_s+"-"+grade_count[grade].to_s %>
                      <% if i!=total_grade_std %>
                      ,
                      <% end %>
                      <% i = i+1 %>
                  <% end %>
              </td>
               <% unless @student_position.blank? %>
                  <% unless @student_position[std['id'].to_i].blank? %>
                     <td><%= @student_position[std['id'].to_i] %></td>
                  <% else %>
                     <td>-</td>
                  <% end %>
               <% end %>
              
           
        </tr>
        <% end %>
      </table>
      <% end %>
      <%= render  :partial=>"/connect_exam/south_point/sign_south_2" %>
    </center>
  </div>
  
  
</div>
<style>
  .no-warp
  {
     white-space: nowrap;
  }
  .even td{

    padding: 4px 4px 5px 8px;
    border: 1px solid #000000;
    border-top: 0px solid #fff;
    text-align: center;

}
.table-header td {
  font-size: 13px;
}
 
.odd td{
    padding: 3px 3px 4px 7px;
    border: 1px solid #000000;
    border-top: 0px solid #fff;
    text-align: center;

}
.table-header td{
    padding: 5px 4px 5px 8px;
    border: 1px solid #000000;
    color: #000000;
    background: #ffffff;
    font-weight: bold;
    text-align: center;
    font-size: 12px;
}
</style>