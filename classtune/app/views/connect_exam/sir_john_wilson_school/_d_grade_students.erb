<%-# Champs21
#Copyright 2010 teamCreative Private Limited
#
#This product includes software developed at
#Project Champs21 - http://www.champs21.com/
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License. -%>

<div id="page-yield" class="available_sections1">
  <% month_number =@connect_exam_obj.published_date.blank? ? @connect_exam_obj.created_at.strftime("%-m"):@connect_exam_obj.published_date.strftime("%-m") %> 
  <div class="page1 sjws"> 
        <div class="logo_left">&nbsp;</div>
        <div class="exam_title_left">
            <p>SIR JOHN WILSON SCHOOL</p><br/>
            <p><%= @connect_exam_obj.name.upcase %> - D GRADE STUDENTS - 
            <% if month_number.to_i>6 %>
              <%= @connect_exam_obj.published_date.blank? ? @connect_exam_obj.created_at.strftime("%Y"):@connect_exam_obj.published_date.strftime("%Y") %>/<%= @connect_exam_obj.published_date.blank? ? @connect_exam_obj.created_at.strftime("%Y").to_i+1:@connect_exam_obj.published_date.strftime("%Y").to_i+1 %>        
            <% else %>
              <%= @connect_exam_obj.published_date.blank? ? @connect_exam_obj.created_at.strftime("%Y").to_i-1:@connect_exam_obj.published_date.strftime("%Y").to_i-1 %>/<%= @connect_exam_obj.published_date.blank? ? @connect_exam_obj.created_at.strftime("%Y"):@connect_exam_obj.published_date.strftime("%Y") %>
            <% end %>
            </p>
        </div>
        <div class="grad_list_right">
            <%= wicked_pdf_image_tag "/"+("#{Rails.root}/"+ ("public/images/school_logo/340/sjws_logo.png")),:width=> '100%' %>
        </div>
    </div>
  <div class="section1 row" >
    <center>     
      
      <div id ="main_info" class="sjws">
            
       
      </div>
      <% unless @report_data.blank? %>
      
      <% 
        @failed_students = [] 
        if @connect_exam_obj.result_type == 15
          @report_data['report']['students'].each do |std| 
              subject_failed = []
              elective_group_ids = []
              @report_data['report']['subjects'].each do |subjects_main| 
                elective_group = ElectiveGroup.find(subjects_main['elective_group_id'].to_i)
                 
                if elective_group_ids.include?(subjects_main['elective_group_id'].to_i)
                   next
                end
                elective_group_ids << subjects_main['elective_group_id'].to_i
                subject_elective = []
                @report_data['report']['subjects'].each do |subjects_all|
                  if subjects_all['elective_group_id'].to_i == subjects_main['elective_group_id'].to_i
                    subject_elective << subjects_all
                  end
                end

                full_mark = 0
                obtain_mark = 0
                subject_elective.each do |sub|
                  subjectdata = Subject.find(sub['id'].to_i) %>
                  <%= render  :partial=>"/connect_exam/check_student_subject", :locals=>{:student_id=>@student.id.to_s,:subject_id=>sub['id'].to_s,:elective_group_id=>subjectdata.elective_group_id.to_i} %>
                  <%
                  if @has_exam_student == false
                    next
                  end
                  unless @report_data['report']['exams'].blank?  
                    @report_data['report']['exams'].each do |report|
                      if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank? 
                          if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                            full_mark = full_mark+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                          end
                          if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                            obtain_mark = obtain_mark+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                          end
                      end
                    end
                  end
                end
                if full_mark > 0
                  if obtain_mark.to_f>0 and full_mark.to_f>0
                    marktotal = (obtain_mark.to_f/full_mark.to_f)*100 
                  else
                    marktotal = 0
                  end
                  
                  grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
                  if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                    unless elective_group.blank?
                      subject_failed << elective_group.name
                    end
                  end
                end

              end
              unless subject_failed.blank?
                 @failed_students << [std,subject_failed]
              end 
          end
        else
            @report_data['report']['students'].each do |std| 
              subject_failed = []
              @report_data['report']['subjects'].each do |sub| 
                subjectdata = Subject.find(sub['id'].to_i)
                check_std_subject = StudentsSubject.find_by_student_id_and_subject_id(std['id'],sub['id'].to_i)
                if check_std_subject.blank? and !subjectdata.elective_group_id.blank?
                  next 
                end 

                full_mark1 = 0
                obtain_mark1 = 0
                full_mark2 = 0
                obtain_mark2 = 0
                full_mark3 = 0
                obtain_mark3 = 0
                full_mark4 = 0
                obtain_mark4 = 0
                unless @report_data['report']['exams'].blank?  
                  @report_data['report']['exams'].each do |report|
                    if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank? and !report['result'][report['exam_id']][sub['id']][std['id']].blank?
                      if (report['quarter'].to_i == 1 or report['quarter'].to_i == 4) and report['exam_category'].to_i == 1
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                          full_mark1 = full_mark1+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                        end
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                          obtain_mark1 = obtain_mark1+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                        end
                      end
                      if report['quarter'].to_i == 3 and report['exam_category'].to_i != 1
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                          full_mark2 = full_mark2+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                        end
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                          obtain_mark2 = obtain_mark2+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                        end
                      end
                      if (report['quarter'].to_i == 2 or report['quarter'].to_i == 5) and report['exam_category'].to_i == 1
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                          full_mark3 = full_mark3+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                        end
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                          obtain_mark3 = obtain_mark3+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                        end
                      end
                      if report['quarter'].to_i == 6 and report['exam_category'].to_i != 1
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].blank?
                          full_mark4 = full_mark4+report['result'][report['exam_id']][sub['id']][std['id']]['full_mark'].to_i
                        end
                        if !report['result'].blank? and !report['result'][report['exam_id']].blank? and !report['result'][report['exam_id']][sub['id']].blank?  and !report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                          obtain_mark4 = obtain_mark4+report['result'][report['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                        end
                      end
                    end
                  end
                end
                if full_mark4 > 0
                  if obtain_mark1.to_f>0 and full_mark1.to_f>0
                    main_mark1 = (obtain_mark1.to_f/full_mark1.to_f)*40 
                  else
                    main_mark1 = 0
                  end
                  if obtain_mark2.to_f>0 and full_mark2.to_f>0
                    main_mark2 = (obtain_mark2.to_f/full_mark2.to_f)*60 
                  else
                    main_mark2 = 0
                  end
                  if obtain_mark3.to_f>0 and full_mark3.to_f>0
                    main_mark3 = (obtain_mark3.to_f/full_mark3.to_f)*40 
                  else
                    main_mark3 = 0
                  end
                  if obtain_mark4.to_f>0 and full_mark4.to_f>0
                    main_mark4 = (obtain_mark4.to_f/full_mark4.to_f)*60 
                  else
                    main_mark4 = 0
                  end

                  firstterm = main_mark1+main_mark2
                  if firstterm > 0
                    firstterm = (firstterm.to_f/100)*40
                  end
                  finalterm = main_mark3+main_mark4
                  if firstterm > 0
                    finalterm = (finalterm.to_f/100)*60
                  end
                  marktotal = firstterm+finalterm
                  grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
                  if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                    subject_failed << sub['name']
                  end
                elsif full_mark3 > 0
                  if obtain_mark3.to_f>0 and full_mark3.to_f>0
                    marktotal = (obtain_mark3.to_f/full_mark3.to_f)*100 
                  else
                    marktotal = 0
                  end
                  grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
                  if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                    subject_failed << sub['name']
                  end
                elsif full_mark2 > 0
                  if obtain_mark1.to_f>0 and full_mark1.to_f>0
                    main_mark1 = (obtain_mark1.to_f/full_mark1.to_f)*40 
                  else
                    main_mark1 = 0
                  end
                  if obtain_mark2.to_f>0 and full_mark2.to_f>0
                    main_mark2 = (obtain_mark2.to_f/full_mark2.to_f)*60 
                  else
                    main_mark2 = 0
                  end
                  marktotal = main_mark1+main_mark2
                  grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
                  if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                    subject_failed << sub['name']
                  end
                else
                  if obtain_mark1.to_f>0 and full_mark1.to_f>0
                    marktotal = (obtain_mark1.to_f/full_mark1.to_f)*100 
                  else
                    marktotal = 0
                  end
                  grade = GradingLevel.percentage_to_grade(marktotal, @batch.id)
                  if !grade.blank? and !grade.name.blank? and grade.name.upcase == "D"
                    subject_failed << sub['name']
                  end
                end

              end
              unless subject_failed.blank?
                 @failed_students << [std,subject_failed]
              end 
          end
        end
    %>  

      <table class="sjws_table_intro" width="100%" cellspacing="0">
        <tr>
          <td colspan="2">
              <p>&nbsp;</p>
              <p><b>Class : <%= (@batch.name=="General")?"":@batch.name+" " %><%= @batch.course.course_name %>&nbsp;<%= @batch.course.section_name %></b></p>
              <p>&nbsp;</p>
          </td>
          
          <td>&nbsp;</td>
          <td>&nbsp;</td>
          <td>&nbsp;</td>
          <td>&nbsp;</td>
          
          <td colspan="2" align="right">
            <p>&nbsp;</p>
            <p><b>
              <% if @connect_exam_obj.result_type == 15 %>
                  <% if @connect_exam_obj.name.upcase.include? ("FIRST") %>
                      <%=  "First Mock"%>
                  <% elsif @connect_exam_obj.name.upcase.include? ("SECOND") %>
                      <%=  "Second Mock"%>
                  <% elsif @connect_exam_obj.name.upcase.include? ("FINAL") %>
                      <%=  "Final Mock"%>
                  <% end %> 
                    
              <% else %>      
                TERM: 
                <% if @connect_exam_obj.name.upcase.include? ("FIRST") or @connect_exam_obj.name.upcase.include? ("1ST") %>
                    <%=  "FIRST TERM"%>
                <% elsif @connect_exam_obj.name.upcase.include? ("SECOND") or @connect_exam_obj.name.upcase.include? ("2ND") or @connect_exam_obj.name.upcase.include? ("HALF") %>
                    <%=  "SECOND TERM"%>
                <% elsif @connect_exam_obj.name.upcase.include? ("FINAL") %>
                    <%=  "FINAL TERM"%>
                <% end %>
              <% end %>
            </b></p>
            <p>&nbsp;</p>
          </td>
        </tr>
        
      </table>
      <table id="pdf-table" class="sjws_table_head" width="99%" cellspacing="0">
        
        
        
        
        <tr class="sjws-table-header">
          <td class="sl"><b>SL.</b></td>
          <td class="st_name"><b>NAME</b></td>
          <td class="name"><center><b><%= "D Grade Subjects" %></b></center></td>
        </tr>
       
        <% unless @failed_students.blank? %>
          <% main_count = 0 %>
          <% @failed_students.each do |std| %>
            <% main_count = main_count+1 %>  
            <tr  class="sjws-table-header">
              <td class="sl"><%= main_count %></td>
              <td class="st_name"><%= std[0]['first_name'].to_s+" "+std[0]['last_name'].to_s %></td>
              <td class="name" width="50%"><%= std[1].join(", ") %></td>
            </tr>
          <% end %>
        <% else %>
        <tr class="tr-bottom">
          <td colspan="100">No Failed Student Found</td>
        </tr>
        <% end %>
      </table>
      <% end %>
    </center>
  </div>
  
  
</div>
