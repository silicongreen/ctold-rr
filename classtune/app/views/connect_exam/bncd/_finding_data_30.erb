<%
if @total_std.blank?
      @total_std_batch = 0
      @total_std = 0
      @student_list = []
      @student_list_batch = []
      @subject_highest = {}
      @student_avg_mark = {}
      @student_result = []
      @subject_result = {}
      @subject_code = {}
      @student_subject_marks = {}
      @absent_in_all_subject = 0
      @section_wise_position = {}	
      @failed_partial_absent = {}	
      @failed_appeared_absent = {}
      @grade_count = {}
      @exam_type_array = []
      loop_std = 0
      batchobj = Batch.find_by_id(@batch.id) 
      courseObj = Course.find_by_id(batchobj.course_id)
      all_courses = Course.find_all_by_course_name(courseObj.course_name)
      all_batch = Batch.find_all_by_course_id(all_courses.map(&:id))
      std_subject = StudentsSubject.find_all_by_batch_id(all_batch.map(&:id),:include=>[:subject])
      @std_subject_hash_type = []
      @std_subject_hash_code = []
      unless std_subject.blank?
        std_subject.each do |std_sub|
          @std_subject_hash_type << std_sub.student_id.to_s+"|||"+std_sub.subject_id.to_s+"|||"+std_sub.elective_type.to_s
          @std_subject_hash_code << std_sub.student_id.to_s+"|||"+std_sub.subject.code
        end
      end
      @batch_subject_hash_code = []
      batch_subject = Subject.find_all_by_batch_id(@batch.id, :conditions=>"elective_group_id IS NULL and is_deleted=false")
      unless batch_subject.blank?
        batch_subject.each do |std_sub|
          @batch_subject_hash_code << std_sub.code
        end
      end
      failed_students = []
      unless @tabulation_data.blank?
        connect_exam = 0
        batch_loop = 0
        group_name = courseObj.group
        @group_name_upper = group_name
        @tabulation_data['report'].each do |tab|
          batch_subject = Subject.find_all_by_batch_id(@tabulation_data['batches'][batch_loop], :conditions=>"elective_group_id IS NULL and is_deleted=false")
          batch_subject_id = batch_subject.map(&:id)
          batch_subject_hash_code_main = []	
          unless batch_subject.blank?	
            batch_subject.each do |std_sub|	
              batch_subject_hash_code_main << std_sub.code	
            end	
          end
          if @tabulation_data['batches'][batch_loop].blank?
            next
          end
          if tab.kind_of?(Array) or tab.blank? or tab['students'].blank?
            next
          end
          batch_data = Batch.find(@tabulation_data['batches'][batch_loop])
          batch_loop = batch_loop+1
          connect_exam_id = @tabulation_data['connect_exams'][connect_exam]
          exam_type = 1
          connect_exam = connect_exam+1
          std_group_name = batch_data.course.group

          if tab.kind_of?(Array) or tab.blank? or tab['students'].blank?
            next
          end

          std_list = []
          tab['students'].each do |std| 
            std_list << std['id'].to_i
          end
          @student_all_tab = []
          unless std_list.blank?
            @student_all_tab = Student.find_all_by_id(std_list)
            all_total_std_subject = StudentsSubject.find_all_by_student_id(std_list)
          end
	  student_id = 0
          tab['students'].each do |std| %>
              <% s = Student.find(std['id']) %>    
              <% student_id = s.id %>
              <%
                @config = Configuration.find_by_config_key('StudentAttendanceType')
                @b = Batch.find(s.batch_id)
                @start_date = ("2021-09-12").to_date
                @end_date = ("2021-11-03").to_date
                @leaves=Hash.new { |h, k| h[k] = Hash.new(&h.default_proc) }
                @today = @local_tzone_time.to_date
                working_days=@b.working_days(@start_date.to_date)
                unless @start_date > @local_tzone_time.to_date
                  unless @config.config_value == 'Daily'
                    unless params[:subject] == '0'
                      @subject = Subject.find params[:subject]
                      @academic_days=@b.subject_hours(@start_date, @end_date, params[:subject]).values.flatten.compact.count
                      @grouped = SubjectLeave.find_all_by_subject_id(@subject.id,  :conditions =>{:month_date => @start_date..@end_date}).group_by(&:student_id)
                      if @grouped[s.id].nil?
                                @leaves[s.id]['leave']=0
                              else
                                @leaves[s.id]['leave']=@grouped[s.id].count
                              end
                              @leaves[s.id]['total'] = (@academic_days - @leaves[s.id]['leave'])
                              @leaves[s.id]['percent'] = (@leaves[s.id]['total'].to_f/@academic_days)*100 unless @academic_days == 0
                    else
                      @academic_days=@b.subject_hours(@start_date, @end_date, 0).values.flatten.compact.count
                      @grouped = @b.subject_leaves.find(:all,  :conditions =>{:month_date => @start_date..@end_date, :student_id => s.id})
                      if @grouped[s.id].nil?
                              @leaves[s.id]['leave']=0
                          else
                            @leaves[s.id]['leave']=@grouped[s.id].count
                      end
                          @leaves[s.id]['total'] = (@academic_days - @leaves[s.id]['leave'])
                          @leaves[s.id]['percent'] = (@leaves[s.id]['total'].to_f/@academic_days)*100 unless @academic_days == 0
                    end
                  else
                      @start_date_main = @start_date

                        @start_date = @start_date_main
                        unless std['admission_date'].blank?
                          if std['admission_date'].to_date > @start_date
                            @start_date = std['admission_date'].to_date
                          end
                        end

                        @academic_days = 0
                        @student_leaves = []
                        if @end_date >= @start_date
                          @academic_days =  @b.find_working_days(@start_date,@end_date).select{|v| v<=@end_date}.count
                          @student_leaves = Attendance.find(:all,:conditions =>{:student_id=>s.id,:batch_id=>@b.id,:month_date => @start_date..@end_date})
                        end

                      on_leaves = 0;
                      leaves_other = 0;
                      leaves_full = 0;
                      unless @student_leaves.empty?
                        @student_leaves.each do |r|
                          if r.student_id == s.id
                            working_days_count=@b.find_working_days(r.month_date.to_date,r.month_date.to_date).select{|v| v<=r.month_date.to_date}.count

                            if working_days_count==1
                              if r.is_leave == true
                                on_leaves = on_leaves+1;
                              elsif r.forenoon==true && r.afternoon==false
                                leaves_other = leaves_other+1;
                              elsif r.forenoon==false && r.afternoon==true  
                                leaves_other = leaves_other+1;
                              else
                                leaves_full = leaves_full+1;
                              end 
                            end
                          end
                        end
                      end
                      @leaves[s.id]['late'] = leaves_other
                      @leaves[s.id]['absent'] = leaves_full
                      @leaves[s.id]['on_leave'] = on_leaves
                      @leaves[s.id]['present'] = @academic_days-on_leaves-leaves_full
                      @leaves[s.id]['total']=@academic_days-leaves_full.to_f-(0.5*leaves_other)
                      @leaves[s.id]['percent'] = 0.0
                      @leaves[s.id]['percent'] = (@leaves[s.id]['total'].to_f/@academic_days)*100 unless @academic_days == 0
                    @academic_days =  @b.find_working_days(@start_date_main,@end_date).select{|v| v<=@end_date}.count
                  end
                else
                  @report = ''
                end
              %> 
              <% student_attendance_percent = 0 %>	
              <% student_attendance_mark = 0 %>	
              <% unless @leaves[s.id]['percent'].nil? %>
                  <% student_attendance_percent =  @leaves[s.id]['percent'] %>
              <% end %>	
              <% if student_attendance_percent.to_f > 0 %>
                  <% if student_attendance_percent >= 0 and student_attendance_percent < 60 %>
                  <% student_attendance_mark = 0 %>	
                  <% elsif student_attendance_percent >= 60 and student_attendance_percent < 71 %>
                  <% student_attendance_mark = 3 %>	
                  <% elsif student_attendance_percent >= 71 and student_attendance_percent < 80 %>
                  <% student_attendance_mark = 4 %>	
                  <% elsif student_attendance_percent >= 80 %>
                  <% student_attendance_mark = 5 %>	
                  <% end %>
              <% end %>    
           <%
          
            total_failed = 0	
            total_failed_appaered = 0
            full_absent = true
            failed_on_appread = false
            grand_total = 0
            grand_total_with_fraction = 0
            grand_grade_point = 0
            u_grade = 0
            grand_total_main = 0
            grade_poin_main = 0
            
            #student_id = 0

            @student_tab = @student_all_tab.find{|val| val.id.to_i == std['id'].to_i }
            if @student_tab.blank?
              next
            end
            if connect_exam_id.to_i == @connect_exam_obj.id or (std_group_name == group_name && !@class.blank?)
              if @student_result[loop_std].blank?
                @student_result[loop_std] = {}
              end
              #student_id = std['id']
              
              @student_result[loop_std]['id'] = std['id']
              @student_result[loop_std]['sl'] = loop_std+1
              @student_result[loop_std]['batch_id'] = batch_data.id	
              @student_result[loop_std]['batch_data'] = batch_data.full_name
              @student_result[loop_std]['sid'] = @student_tab.admission_no
              @student_result[loop_std]['roll'] = @student_tab.class_roll_no
              @student_result[loop_std]['name'] = @student_tab.full_name
              @student_result[loop_std]['subjects'] = {}
            end
            if std_group_name == group_name or connect_exam_id.to_i == @connect_exam_obj.id
              @total_std = @total_std+1
            end
            total_std_subject = all_total_std_subject.select{|val| val.student_id.to_i == std['id'].to_i }
            std_subject_id = total_std_subject.map(&:subject_id)
            total_subject = 0
            subject_grade_done = []
            subject_array = []
            pass_mark_cq = 0 
		        total_cq = 0   
		        pass_mark_mcq = 0 
	          total_mcq = 0 
	
            tab['subjects'].each do |sub|
	    
              if subject_array.include?(sub['id'].to_i)
                next
              end
              subject_array << sub['id'].to_i
              if !@subject_code.blank? && !@subject_code[sub['code']].blank?	
                main_sub_id = @subject_code[sub['code']]
              else	
                @subject_code[sub['code'].to_s] = sub['code']	
                main_sub_id = sub['code']	
              end 	
              if connect_exam_id.to_i == @connect_exam_obj.id or (std_group_name == group_name && !@class.blank?)	
                @student_result[loop_std]['subjects'][main_sub_id.to_s] = {}	
                @student_result[loop_std]['subjects'][main_sub_id.to_s]['name'] = sub['name']	
                @student_result[loop_std]['subjects'][main_sub_id.to_s]['id'] = main_sub_id	
                @student_result[loop_std]['subjects'][main_sub_id.to_s]['result'] = {}	
              end
              fourth_subject = false
              if !@std_subject_hash_type.blank?
                if @std_subject_hash_type.include?(std['id'].to_s+"|||"+sub['id'].to_s+"|||4")
                  fourth_subject = true
                end  
              end 
              has_exam = false
              tab['exams'].each do |rs|
                if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].blank?
                  has_exam = true
                  break
                end  
              end 
              if has_exam == false
                next
              end
              if batch_subject_id.include?(sub['id'].to_i) or std_subject_id.include?(sub['id'].to_i)
                if fourth_subject == false && sub['subject_group_id'].to_i == 0 &&  sub['grade_subject'].to_i == 0 and !subject_grade_done.include?(sub['id'].to_i)
                  total_subject = total_subject+1
                end
                subject_failed = false
                appeared = false
                four_subject_failed = false
                total_mark_subject = 0
                full_mark_subject = 0
                main_mark = 0
                cq = 0
                mcq = 0
                att = 0
            
                cq_total = 0
                mcq_total = 0
                tab['exams'].each do |rs|
                  exam_marks = 0
                  exam_full_marks = 0
                  if !rs['result'].blank? and !rs['result'][rs['exam_id']].blank? and !rs['result'][rs['exam_id']][sub['id']].blank? and !rs['result'][rs['exam_id']][sub['id']][std['id']].blank?
                    if rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_s != "AB"
                      appeared = true
                      full_absent = false
                    end
                    if rs['exam_category'] == '3'
                      cq = cq+rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                      cq_total = cq_total+rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f  		
                    elsif rs['exam_category'] == '4'
                      mcq = mcq+rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                      mcq_total = mcq_total+rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f  
                    else
                      att = student_attendance_mark.to_f   
                    end
                    exam_marks = rs['result'][rs['exam_id']][sub['id']][std['id']]['marks_obtained'].to_f
                    exam_full_marks = rs['result'][rs['exam_id']][sub['id']][std['id']]['full_mark'].to_f
                  end

                end
		
		            if mcq_total > 0 && mcq > 0
                  if mcq_total == 35 or mcq_total == 40
                    mcq = (mcq.to_f/mcq_total.to_f)*25
                    mcq = mcq.round()
                    if mcq < 8
                      #if fourth_subject.blank?
                      #  subject_failed = true
                      #  u_grade = u_grade+1 
                      #else
                      #  four_subject_failed = true
                      #end
                    end  
                  end
                end
                if cq_total > 0 && cq > 0
                  if cq_total == 90 or cq_total == 95
                    cq = (cq.to_f/cq_total.to_f)*70
                    cq = cq.round()
                    #if cq < 23
                    #  if fourth_subject.blank?
                    #    subject_failed = true
                    #    u_grade = u_grade+1 
                    #  else
                    #    four_subject_failed = true
                    #  end
                    #end 
                  end
                  if cq_total == 130
                    cq = (cq.to_f/cq_total.to_f)*95
                    cq = cq.round()
                    #if cq < 31
                    #  if fourth_subject.blank?
                    #    subject_failed = true
                    #    u_grade = u_grade+1 
                    # else
                    #    four_subject_failed = true
                    #  end
                    #end 
                  end
                end
                main_mark = cq+mcq+att
                if main_mark < 33
                  if fourth_subject.blank?
                      subject_failed = true
                      u_grade = u_grade+1 
                  else
                      four_subject_failed = true
                  end
                end
		
                total_mark_subject = main_mark
                main_mark = main_mark.round()
                grade = GradingLevel.percentage_to_grade(main_mark, @batch.id)
                
                if !grade.blank? and !grade.name.blank?
                  if grade.credit_points.to_i == 0
                    if fourth_subject.blank?
                      subject_failed = true
                      u_grade = u_grade+1 
                    else
                      four_subject_failed = true
                    end
                  end

                  if fourth_subject.blank? && subject_failed == false
                    grand_grade_point = grand_grade_point+grade.credit_points.to_f
                  elsif subject_failed == false and four_subject_failed == false
                    new_grade_point = grade.credit_points.to_f-2
                    if new_grade_point > 0
                      grand_grade_point = grand_grade_point+new_grade_point.to_f
                    end
                  end
                end

                if @student_subject_marks[sub['id'].to_i].blank?
                  @student_subject_marks[sub['id'].to_i] = {}
                end
                @student_subject_marks[sub['id'].to_i][std['id'].to_i] = total_mark_subject


                if connect_exam_id.to_i == @connect_exam_obj.id or (std_group_name == group_name && !@class.blank?)

                  if appeared
                    @student_result[loop_std]['subjects'][main_sub_id]['result']['sb'] = total_mark_subject
                  else
                    @student_result[loop_std]['subjects'][main_sub_id]['result']['sb'] = "AB"
                  end     


                  @student_result[loop_std]['subjects'][main_sub_id]['result']['rt'] = total_mark_subject

                  @student_result[loop_std]['subjects'][main_sub_id]['result']['ct'] = total_mark_subject.round()


                  if @subject_result[main_sub_id].blank?
                    @subject_result[main_sub_id] = {}
                    @subject_result[main_sub_id]['id'] = main_sub_id
                    @subject_result[main_sub_id]['name'] = sub['name']

                  end
                  if @subject_result[main_sub_id]['total'].blank?
                    @subject_result[main_sub_id]['total'] = 1
                  else
                    @subject_result[main_sub_id]['total'] = @subject_result[main_sub_id]['total']+1
                  end
                  
                  @student_result[loop_std]['subjects'][main_sub_id]['result']['parcent'] = main_mark

                  grade = GradingLevel.percentage_to_grade(main_mark, @batch.id)
                  if !grade.blank? && !grade.name.blank?
                    if subject_failed == true or four_subject_failed == true
                        @student_result[loop_std]['subjects'][main_sub_id]['result']['lg'] = "F"
                    else
                      @student_result[loop_std]['subjects'][main_sub_id]['result']['lg'] = grade.name
                    end
                  end
                  if !grade.blank? && !grade.name.blank? && sub['grade_subject'].to_i != 1
                    if subject_failed == true
                      if @subject_result[main_sub_id]['failed'].blank?
                        @subject_result[main_sub_id]['failed'] = 1
                      else
                        @subject_result[main_sub_id]['failed'] = @subject_result[main_sub_id]['failed']+1
                      end
                      if appeared
                        if @subject_result[main_sub_id]['appeared'].blank?
                          @subject_result[main_sub_id]['appeared'] = 1
                        else
                          @subject_result[main_sub_id]['appeared'] = @subject_result[main_sub_id]['appeared']+1
                        end
                      else
                        if @subject_result[main_sub_id]['absent'].blank?
                          @subject_result[main_sub_id]['absent'] = 1
                        else
                          @subject_result[main_sub_id]['absent'] = @subject_result[main_sub_id]['absent']+1
                        end
                      end
                      if fourth_subject.blank?
                        if @student_result[loop_std]['subject_failed'].blank?
                          @student_result[loop_std]['subject_failed'] = []
                        end

                        @student_result[loop_std]['subject_failed'] << sub['code']+"-"+total_mark_subject.round().to_s
                      end 
                    else
                      if @subject_result[main_sub_id].blank?
                        @subject_result[main_sub_id] = {}
                        @subject_result[main_sub_id]['id'] = main_sub_id
                        @subject_result[main_sub_id]['name'] = sub['name']
                      end
                      if @subject_result[main_sub_id]['passed'].blank?
                        @subject_result[main_sub_id]['passed'] = 1
                      else
                        @subject_result[main_sub_id]['passed'] = @subject_result[main_sub_id]['passed']+1
                      end
                    end  
                  end
                end

                if @subject_highest[sub['id'].to_i].blank?
                  @subject_highest[sub['id'].to_i] = total_mark_subject
                elsif total_mark_subject.to_f > @subject_highest[sub['id'].to_i].to_f
                  @subject_highest[sub['id'].to_i] = total_mark_subject.to_f
                end

              end

            end 

            grade_point_avg = 0
            if grand_grade_point > 0 && total_subject > 0
              grade_point_avg = grand_grade_point.to_f/total_subject.to_f
              grade_point_avg = grade_point_avg.round(2)
              if grade_point_avg > 5
                grade_point_avg = 5.00     
              end
            end
            grand_total_with_fraction = sprintf( "%0.02f", grand_total_with_fraction)
            grand_total_with_fraction = grand_total_with_fraction.to_f
            if connect_exam_id.to_i == @connect_exam_obj.id or (std_group_name == group_name && !@class.blank?)
              @total_std_batch = @total_std_batch+1
              if full_absent
                @absent_in_all_subject = @absent_in_all_subject+1
              end
              grade_point_avg = 0
              if grand_grade_point > 0 && total_subject > 0
                grade_point_avg = grand_grade_point.to_f/total_subject.to_f
                grade_point_avg = grade_point_avg.round(2)
                if grade_point_avg > 5
                  grade_point_avg = 5.00
                end
              end
              @student_result[loop_std]['gpa'] = grand_grade_point
              @student_result[loop_std]['grand_total'] = grand_total
              @student_result[loop_std]['grand_total_with_fraction'] = grand_total_with_fraction
              @student_result[loop_std]['gp'] = grade_point_avg
              gradeObj = GradingLevel.grade_point_to_grade(grade_point_avg, @batch.id)
              if !gradeObj.blank? and !gradeObj.name.blank?
                @student_result[loop_std]['lg'] = gradeObj.name
              end
              loop_std = loop_std+1
            end
            if u_grade == 0
              grand_total_new = 50000-grand_total_with_fraction
              grand_grade_new = 50000-grand_grade_point

              if connect_exam_id.to_i == @connect_exam_obj.id or (std_group_name == group_name && !@class.blank?)
                @student_list_batch << [grand_grade_new.to_f,grand_total_new.to_f,std['id'].to_i]
                if !gradeObj.blank? and !gradeObj.name.blank?
                  if @grade_count[gradeObj.name].blank?
                    @grade_count[gradeObj.name] = 1
                  else
                    @grade_count[gradeObj.name] = @grade_count[gradeObj.name]+1
                  end
                end
              end 
              if std_group_name == group_name or connect_exam_id.to_i == @connect_exam_obj.id
                @student_list << [grand_grade_new.to_f,grand_total_new.to_f,std['id'].to_i]
                if @section_wise_position[batch_data.id].blank?
                  @section_wise_position[batch_data.id] = []
                end
                @section_wise_position[batch_data.id] << [grand_grade_new.to_f,grand_total_new.to_f,std['id'].to_i]
              end
            end 
            if total_failed_appaered > 0
              if @failed_appeared_absent[total_failed_appaered].blank?
                @failed_appeared_absent[total_failed_appaered] = 1
              else
                @failed_appeared_absent[total_failed_appaered] = @failed_appeared_absent[total_failed_appaered]+1
              end
            end
            if total_failed > 0
              if @failed_partial_absent[total_failed].blank?
                @failed_partial_absent[total_failed] = 1
              else
                @failed_partial_absent[total_failed] = @failed_partial_absent[total_failed]+1
              end
            end      
          end  
        end  
      end
      @student_position = {}
      @student_position_batch = {}
      @section_all_position_batch = {}
      last_grade = 0.0
      last_total = 0.0

      unless @student_list.blank?
        position = 0
        @sorted_students = @student_list.sort
        @sorted_students.each do|s|
          #if last_grade != s[0] or last_total != s[1]
         #   position = position+1
         # end
          last_grade = s[0]
          last_total = s[1]
         # @student_position[s[2].to_i] = position
         unless failed_students.include?(s[2].to_i)
            position = position+1
            @student_position[s[2].to_i] = position
          end
        end 
      end

      last_grade = 0.0
      last_total = 0.0
      unless @student_list_batch.blank?
        position = 0
        @sorted_students = @student_list_batch.sort
        @sorted_students.each do|s|
          #if last_grade != s[0] or last_total != s[1]
          unless failed_students.include?(s[2].to_i)
            position = position+1
            @student_position_batch[s[2].to_i] = position
          end
         # end
          last_grade = s[0]
          last_total = s[1]
          
        end 
      end

      last_grade = 0.0
      last_total = 0.0



      unless @section_wise_position.blank?
        @section_wise_position.each do|key,value|
          position = 0

          @sorted_students = @section_wise_position[key].sort
          @sorted_students.each do|s|

            if last_grade != s[0] or last_total != s[1]
              position = position+1
            end
            last_grade = s[0]
            last_total = s[1]
            if @section_all_position_batch[key].blank?
              @section_all_position_batch[key] = {}
            end
            @section_all_position_batch[key][s[2].to_i] = position
          end 
        end
      end

    end

%>
